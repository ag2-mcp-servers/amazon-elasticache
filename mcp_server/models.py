# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:12:59+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class APICallRateForCustomerExceededFault(RootModel[Any]):
    root: Any


class AZMode(Enum):
    single_az = 'single-az'
    cross_az = 'cross-az'


class AccessString(RootModel[constr(pattern=r'.*\S.*')]):
    root: constr(pattern=r'.*\S.*')


class AllowedNodeGroupId(RootModel[constr(pattern=r'\d+', min_length=1, max_length=4)]):
    root: constr(pattern=r'\d+', min_length=1, max_length=4)


class AuthTokenUpdateStatus(Enum):
    SETTING = 'SETTING'
    ROTATING = 'ROTATING'


class AuthTokenUpdateStrategyType(Enum):
    SET = 'SET'
    ROTATE = 'ROTATE'
    DELETE = 'DELETE'


class AuthenticationType(Enum):
    password = 'password'
    no_password = 'no-password'
    iam = 'iam'


class AuthorizationAlreadyExistsFault(RootModel[Any]):
    root: Any


class AuthorizationNotFoundFault(RootModel[Any]):
    root: Any


class AutomaticFailoverStatus(Enum):
    enabled = 'enabled'
    disabled = 'disabled'
    enabling = 'enabling'
    disabling = 'disabling'


class Boolean(RootModel[bool]):
    root: bool


class BooleanOptional(RootModel[bool]):
    root: bool


class CacheClusterAlreadyExistsFault(RootModel[Any]):
    root: Any


class CacheClusterNotFoundFault(RootModel[Any]):
    root: Any


class CacheParameterGroupAlreadyExistsFault(RootModel[Any]):
    root: Any


class CacheParameterGroupNotFoundFault(RootModel[Any]):
    root: Any


class CacheParameterGroupQuotaExceededFault(RootModel[Any]):
    root: Any


class CacheSecurityGroupAlreadyExistsFault(RootModel[Any]):
    root: Any


class CacheSecurityGroupNotFoundFault(RootModel[Any]):
    root: Any


class CacheSecurityGroupQuotaExceededFault(RootModel[Any]):
    root: Any


class CacheSubnetGroupAlreadyExistsFault(RootModel[Any]):
    root: Any


class CacheSubnetGroupInUse(RootModel[Any]):
    root: Any


class CacheSubnetGroupNotFoundFault(RootModel[Any]):
    root: Any


class CacheSubnetGroupQuotaExceededFault(RootModel[Any]):
    root: Any


class CacheSubnetQuotaExceededFault(RootModel[Any]):
    root: Any


class ChangeType(Enum):
    immediate = 'immediate'
    requires_reboot = 'requires-reboot'


class ClusterQuotaForCustomerExceededFault(RootModel[Any]):
    root: Any


class DataTieringStatus(Enum):
    enabled = 'enabled'
    disabled = 'disabled'


class DefaultUserAssociatedToUserGroupFault(RootModel[Any]):
    root: Any


class DefaultUserRequired(RootModel[Any]):
    root: Any


class DestinationType(Enum):
    cloudwatch_logs = 'cloudwatch-logs'
    kinesis_firehose = 'kinesis-firehose'


class Double(RootModel[float]):
    root: float


class DuplicateUserNameFault(RootModel[Any]):
    root: Any


class EngineType(RootModel[constr(pattern=r'[a-zA-Z]*')]):
    root: constr(pattern=r'[a-zA-Z]*')


class FilterName(RootModel[constr(pattern=r'.*\S.*')]):
    root: constr(pattern=r'.*\S.*')


class FilterValue(RootModel[constr(pattern=r'.*\S.*')]):
    root: constr(pattern=r'.*\S.*')


class FilterValueList(RootModel[List[FilterValue]]):
    root: List[FilterValue] = Field(..., min_length=1)


class GlobalReplicationGroupAlreadyExistsFault(RootModel[Any]):
    root: Any


class GlobalReplicationGroupNotFoundFault(RootModel[Any]):
    root: Any


class InputAuthenticationType(Enum):
    password = 'password'
    no_password_required = 'no-password-required'
    iam = 'iam'


class InsufficientCacheClusterCapacityFault(RootModel[Any]):
    root: Any


class Integer(RootModel[int]):
    root: int


class IntegerOptional(RootModel[int]):
    root: int


class InvalidARNFault(RootModel[Any]):
    root: Any


class InvalidCacheClusterStateFault(RootModel[Any]):
    root: Any


class InvalidCacheParameterGroupStateFault(RootModel[Any]):
    root: Any


class InvalidCacheSecurityGroupStateFault(RootModel[Any]):
    root: Any


class InvalidGlobalReplicationGroupStateFault(RootModel[Any]):
    root: Any


class InvalidKMSKeyFault(RootModel[Any]):
    root: Any


class InvalidParameterCombinationException(RootModel[Any]):
    root: Any


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class InvalidReplicationGroupStateFault(RootModel[Any]):
    root: Any


class InvalidSnapshotStateFault(RootModel[Any]):
    root: Any


class InvalidSubnet(RootModel[Any]):
    root: Any


class InvalidUserGroupStateFault(RootModel[Any]):
    root: Any


class InvalidUserStateFault(RootModel[Any]):
    root: Any


class InvalidVPCNetworkStateFault(RootModel[Any]):
    root: Any


class IpDiscovery(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class LogDeliveryConfigurationStatus(Enum):
    active = 'active'
    enabling = 'enabling'
    modifying = 'modifying'
    disabling = 'disabling'
    error = 'error'


class LogFormat(Enum):
    text = 'text'
    json = 'json'


class LogType(Enum):
    slow_log = 'slow-log'
    engine_log = 'engine-log'


class MultiAZStatus(Enum):
    enabled = 'enabled'
    disabled = 'disabled'


class NetworkType(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'
    dual_stack = 'dual_stack'


class NetworkTypeList(RootModel[List[NetworkType]]):
    root: List[NetworkType]


class NoOperationFault(RootModel[Any]):
    root: Any


class NodeGroupNotFoundFault(RootModel[Any]):
    root: Any


class NodeGroupsPerReplicationGroupQuotaExceededFault(RootModel[Any]):
    root: Any


class NodeGroupsToRemoveList(RootModel[List[AllowedNodeGroupId]]):
    root: List[AllowedNodeGroupId]


class NodeGroupsToRetainList(RootModel[List[AllowedNodeGroupId]]):
    root: List[AllowedNodeGroupId]


class NodeQuotaForClusterExceededFault(RootModel[Any]):
    root: Any


class NodeQuotaForCustomerExceededFault(RootModel[Any]):
    root: Any


class NodeUpdateInitiatedBy(Enum):
    system = 'system'
    customer = 'customer'


class NodeUpdateStatus(Enum):
    not_applied = 'not-applied'
    waiting_to_start = 'waiting-to-start'
    in_progress = 'in-progress'
    stopping = 'stopping'
    stopped = 'stopped'
    complete = 'complete'


class OutpostMode(Enum):
    single_outpost = 'single-outpost'
    cross_outpost = 'cross-outpost'


class PendingAutomaticFailoverStatus(Enum):
    enabled = 'enabled'
    disabled = 'disabled'


class ReplicationGroupAlreadyExistsFault(RootModel[Any]):
    root: Any


class ReplicationGroupAlreadyUnderMigrationFault(RootModel[Any]):
    root: Any


class ReplicationGroupNotFoundFault(RootModel[Any]):
    root: Any


class ReplicationGroupNotUnderMigrationFault(RootModel[Any]):
    root: Any


class ReservedCacheNodeAlreadyExistsFault(RootModel[Any]):
    root: Any


class ReservedCacheNodeNotFoundFault(RootModel[Any]):
    root: Any


class ReservedCacheNodeQuotaExceededFault(RootModel[Any]):
    root: Any


class ReservedCacheNodesOfferingNotFoundFault(RootModel[Any]):
    root: Any


class ServiceLinkedRoleNotFoundFault(RootModel[Any]):
    root: Any


class ServiceUpdateNotFoundFault(RootModel[Any]):
    root: Any


class ServiceUpdateSeverity(Enum):
    critical = 'critical'
    important = 'important'
    medium = 'medium'
    low = 'low'


class ServiceUpdateStatus(Enum):
    available = 'available'
    cancelled = 'cancelled'
    expired = 'expired'


class ServiceUpdateStatusList(RootModel[List[ServiceUpdateStatus]]):
    root: List[ServiceUpdateStatus] = Field(..., max_length=3)


class ServiceUpdateType(Enum):
    security_update = 'security-update'


class SlaMet(Enum):
    yes = 'yes'
    no = 'no'
    n_a = 'n/a'


class SlotMigration(BaseModel):
    ProgressPercentage: Optional[Double] = None


class SnapshotAlreadyExistsFault(RootModel[Any]):
    root: Any


class SnapshotFeatureNotSupportedFault(RootModel[Any]):
    root: Any


class SnapshotNotFoundFault(RootModel[Any]):
    root: Any


class SnapshotQuotaExceededFault(RootModel[Any]):
    root: Any


class SourceType(Enum):
    cache_cluster = 'cache-cluster'
    cache_parameter_group = 'cache-parameter-group'
    cache_security_group = 'cache-security-group'
    cache_subnet_group = 'cache-subnet-group'
    replication_group = 'replication-group'
    user = 'user'
    user_group = 'user-group'


class String(RootModel[str]):
    root: str


class SubnetIdentifierList(RootModel[List[String]]):
    root: List[String]


class SubnetInUse(RootModel[Any]):
    root: Any


class SubnetNotAllowedFault(RootModel[Any]):
    root: Any


class SubnetOutpost(BaseModel):
    SubnetOutpostArn: Optional[String] = None


class TStamp(RootModel[datetime]):
    root: datetime


class Tag(BaseModel):
    Key: Optional[String] = None
    Value: Optional[String] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagListMessage(BaseModel):
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class TagNotFoundFault(RootModel[Any]):
    root: Any


class TagQuotaPerResourceExceeded(RootModel[Any]):
    root: Any


class TestFailoverMessage(BaseModel):
    NodeGroupId: AllowedNodeGroupId
    ReplicationGroupId: String


class TestFailoverNotAvailableFault(RootModel[Any]):
    root: Any


class TimeRangeFilter(BaseModel):
    EndTime: Optional[TStamp] = None
    StartTime: Optional[TStamp] = None


class TransitEncryptionMode(Enum):
    preferred = 'preferred'
    required = 'required'


class UGReplicationGroupIdList(RootModel[List[String]]):
    root: List[String]


class UnprocessedUpdateAction(BaseModel):
    CacheClusterId: Optional[String] = None
    ErrorMessage: Optional[String] = None
    ErrorType: Optional[String] = None
    ReplicationGroupId: Optional[String] = None
    ServiceUpdateName: Optional[String] = None


class UnprocessedUpdateActionList(RootModel[List[UnprocessedUpdateAction]]):
    root: List[UnprocessedUpdateAction]


class UpdateActionStatus(Enum):
    not_applied = 'not-applied'
    waiting_to_start = 'waiting-to-start'
    in_progress = 'in-progress'
    stopping = 'stopping'
    stopped = 'stopped'
    complete = 'complete'
    scheduling = 'scheduling'
    scheduled = 'scheduled'
    not_applicable = 'not-applicable'


class UpdateActionStatusList(RootModel[List[UpdateActionStatus]]):
    root: List[UpdateActionStatus] = Field(..., max_length=9)


class UserAlreadyExistsFault(RootModel[Any]):
    root: Any


class UserGroupAlreadyExistsFault(RootModel[Any]):
    root: Any


class UserGroupId(RootModel[constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-]*', min_length=1)]):
    root: constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-]*', min_length=1)


class UserGroupIdList(RootModel[List[UserGroupId]]):
    root: List[UserGroupId]


class UserGroupIdListInput(RootModel[List[UserGroupId]]):
    root: List[UserGroupId] = Field(..., min_length=1)


class UserGroupNotFoundFault(RootModel[Any]):
    root: Any


class UserGroupQuotaExceededFault(RootModel[Any]):
    root: Any


class UserGroupsUpdateStatus(BaseModel):
    UserGroupIdsToAdd: Optional[UserGroupIdList] = None
    UserGroupIdsToRemove: Optional[UserGroupIdList] = None


class UserId(RootModel[constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-]*', min_length=1)]):
    root: constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-]*', min_length=1)


class UserIdList(RootModel[List[UserId]]):
    root: List[UserId]


class UserIdListInput(RootModel[List[UserId]]):
    root: List[UserId] = Field(..., min_length=1)


class UserName(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class UserNotFoundFault(RootModel[Any]):
    root: Any


class UserQuotaExceededFault(RootModel[Any]):
    root: Any


class Action(Enum):
    AddTagsToResource = 'AddTagsToResource'


class Version(Enum):
    field_2015_02_02 = '2015-02-02'


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class Action4(Enum):
    AuthorizeCacheSecurityGroupIngress = 'AuthorizeCacheSecurityGroupIngress'


class Action8(Enum):
    BatchApplyUpdateAction = 'BatchApplyUpdateAction'


class ReplicationGroupIds(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=20)


class CacheClusterIds(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=20)


class Action12(Enum):
    BatchStopUpdateAction = 'BatchStopUpdateAction'


class Action16(Enum):
    CompleteMigration = 'CompleteMigration'


class Action20(Enum):
    CopySnapshot = 'CopySnapshot'


class Action24(Enum):
    CreateCacheCluster = 'CreateCacheCluster'


class PreferredAvailabilityZones(RootModel[List[String]]):
    root: List[String]


class CacheSecurityGroupNames(RootModel[List[String]]):
    root: List[String]


class SecurityGroupIds(RootModel[List[String]]):
    root: List[String]


class SnapshotArns(RootModel[List[String]]):
    root: List[String]


class PreferredOutpostArns(RootModel[List[String]]):
    root: List[String]


class Action28(Enum):
    CreateCacheParameterGroup = 'CreateCacheParameterGroup'


class Action32(Enum):
    CreateCacheSecurityGroup = 'CreateCacheSecurityGroup'


class Action36(Enum):
    CreateCacheSubnetGroup = 'CreateCacheSubnetGroup'


class SubnetIds(RootModel[List[String]]):
    root: List[String]


class Action40(Enum):
    CreateGlobalReplicationGroup = 'CreateGlobalReplicationGroup'


class Action44(Enum):
    CreateReplicationGroup = 'CreateReplicationGroup'


class PreferredCacheClusterAZs(RootModel[List[String]]):
    root: List[String]


class UserGroupIds(RootModel[List[UserGroupId]]):
    root: List[UserGroupId] = Field(..., min_length=1)


class Action48(Enum):
    CreateSnapshot = 'CreateSnapshot'


class Action52(Enum):
    CreateUser = 'CreateUser'


class Passwords(RootModel[List[String]]):
    root: List[String] = Field(..., min_length=1)


class Action56(Enum):
    CreateUserGroup = 'CreateUserGroup'


class UserIds(RootModel[List[UserId]]):
    root: List[UserId] = Field(..., min_length=1)


class Action60(Enum):
    DecreaseNodeGroupsInGlobalReplicationGroup = (
        'DecreaseNodeGroupsInGlobalReplicationGroup'
    )


class GlobalNodeGroupsToRemove(RootModel[List[String]]):
    root: List[String]


class GlobalNodeGroupsToRetain(RootModel[List[String]]):
    root: List[String]


class Action64(Enum):
    DecreaseReplicaCount = 'DecreaseReplicaCount'


class ReplicasToRemove(RootModel[List[String]]):
    root: List[String]


class Action68(Enum):
    DeleteCacheCluster = 'DeleteCacheCluster'


class Action72(Enum):
    DeleteCacheParameterGroup = 'DeleteCacheParameterGroup'


class Action76(Enum):
    DeleteCacheSecurityGroup = 'DeleteCacheSecurityGroup'


class Action80(Enum):
    DeleteCacheSubnetGroup = 'DeleteCacheSubnetGroup'


class Action84(Enum):
    DeleteGlobalReplicationGroup = 'DeleteGlobalReplicationGroup'


class Action88(Enum):
    DeleteReplicationGroup = 'DeleteReplicationGroup'


class Action92(Enum):
    DeleteSnapshot = 'DeleteSnapshot'


class Action96(Enum):
    DeleteUser = 'DeleteUser'


class Action100(Enum):
    DeleteUserGroup = 'DeleteUserGroup'


class Action104(Enum):
    DescribeCacheClusters = 'DescribeCacheClusters'


class Action108(Enum):
    DescribeCacheEngineVersions = 'DescribeCacheEngineVersions'


class Action112(Enum):
    DescribeCacheParameterGroups = 'DescribeCacheParameterGroups'


class Action116(Enum):
    DescribeCacheParameters = 'DescribeCacheParameters'


class Action120(Enum):
    DescribeCacheSecurityGroups = 'DescribeCacheSecurityGroups'


class Action124(Enum):
    DescribeCacheSubnetGroups = 'DescribeCacheSubnetGroups'


class Action128(Enum):
    DescribeEngineDefaultParameters = 'DescribeEngineDefaultParameters'


class Action132(Enum):
    DescribeEvents = 'DescribeEvents'


class Action136(Enum):
    DescribeGlobalReplicationGroups = 'DescribeGlobalReplicationGroups'


class Action140(Enum):
    DescribeReplicationGroups = 'DescribeReplicationGroups'


class Action144(Enum):
    DescribeReservedCacheNodes = 'DescribeReservedCacheNodes'


class Action148(Enum):
    DescribeReservedCacheNodesOfferings = 'DescribeReservedCacheNodesOfferings'


class Action152(Enum):
    DescribeServiceUpdates = 'DescribeServiceUpdates'


class ServiceUpdateStatus1(RootModel[List[ServiceUpdateStatus]]):
    root: List[ServiceUpdateStatus] = Field(..., max_length=3)


class Action156(Enum):
    DescribeSnapshots = 'DescribeSnapshots'


class ServiceUpdateTimeRange(BaseModel):
    EndTime: Optional[TStamp] = None
    StartTime: Optional[TStamp] = None


class Action160(Enum):
    DescribeUpdateActions = 'DescribeUpdateActions'


class UpdateActionStatus1(RootModel[List[UpdateActionStatus]]):
    root: List[UpdateActionStatus] = Field(..., max_length=9)


class Action164(Enum):
    DescribeUserGroups = 'DescribeUserGroups'


class Action168(Enum):
    DescribeUsers = 'DescribeUsers'


class Action172(Enum):
    DisassociateGlobalReplicationGroup = 'DisassociateGlobalReplicationGroup'


class Action176(Enum):
    FailoverGlobalReplicationGroup = 'FailoverGlobalReplicationGroup'


class Action180(Enum):
    IncreaseNodeGroupsInGlobalReplicationGroup = (
        'IncreaseNodeGroupsInGlobalReplicationGroup'
    )


class Action184(Enum):
    IncreaseReplicaCount = 'IncreaseReplicaCount'


class Action188(Enum):
    ListAllowedNodeTypeModifications = 'ListAllowedNodeTypeModifications'


class Action192(Enum):
    ListTagsForResource = 'ListTagsForResource'


class AuthTokenUpdateStrategy(Enum):
    SET = 'SET'
    ROTATE = 'ROTATE'
    DELETE = 'DELETE'


class Action196(Enum):
    ModifyCacheCluster = 'ModifyCacheCluster'


class CacheNodeIdsToRemove(RootModel[List[String]]):
    root: List[String]


class NewAvailabilityZones(RootModel[List[String]]):
    root: List[String]


class Action200(Enum):
    ModifyCacheParameterGroup = 'ModifyCacheParameterGroup'


class Action204(Enum):
    ModifyCacheSubnetGroup = 'ModifyCacheSubnetGroup'


class Action208(Enum):
    ModifyGlobalReplicationGroup = 'ModifyGlobalReplicationGroup'


class Action212(Enum):
    ModifyReplicationGroup = 'ModifyReplicationGroup'


class UserGroupIdsToAdd(RootModel[List[UserGroupId]]):
    root: List[UserGroupId]


class UserGroupIdsToRemove(RootModel[List[UserGroupId]]):
    root: List[UserGroupId]


class Action216(Enum):
    ModifyReplicationGroupShardConfiguration = (
        'ModifyReplicationGroupShardConfiguration'
    )


class NodeGroupsToRemove(RootModel[List[AllowedNodeGroupId]]):
    root: List[AllowedNodeGroupId]


class NodeGroupsToRetain(RootModel[List[AllowedNodeGroupId]]):
    root: List[AllowedNodeGroupId]


class Action220(Enum):
    ModifyUser = 'ModifyUser'


class Action224(Enum):
    ModifyUserGroup = 'ModifyUserGroup'


class UserIdsToAdd(RootModel[List[UserId]]):
    root: List[UserId] = Field(..., min_length=1)


class UserIdsToRemove(RootModel[List[UserId]]):
    root: List[UserId] = Field(..., min_length=1)


class Action228(Enum):
    PurchaseReservedCacheNodesOffering = 'PurchaseReservedCacheNodesOffering'


class Action232(Enum):
    RebalanceSlotsInGlobalReplicationGroup = 'RebalanceSlotsInGlobalReplicationGroup'


class Action236(Enum):
    RebootCacheCluster = 'RebootCacheCluster'


class CacheNodeIdsToReboot(RootModel[List[String]]):
    root: List[String]


class Action240(Enum):
    RemoveTagsFromResource = 'RemoveTagsFromResource'


class TagKeys(RootModel[List[String]]):
    root: List[String]


class Action244(Enum):
    ResetCacheParameterGroup = 'ResetCacheParameterGroup'


class Action248(Enum):
    RevokeCacheSecurityGroupIngress = 'RevokeCacheSecurityGroupIngress'


class Action252(Enum):
    StartMigration = 'StartMigration'


class Action256(Enum):
    TestFailover = 'TestFailover'


class AddTagsToResourceMessage(BaseModel):
    ResourceName: String
    Tags: TagList


class Authentication(BaseModel):
    PasswordCount: Optional[IntegerOptional] = None
    Type: Optional[AuthenticationType] = None


class AuthorizeCacheSecurityGroupIngressMessage(BaseModel):
    CacheSecurityGroupName: String
    EC2SecurityGroupName: String
    EC2SecurityGroupOwnerId: String


class AvailabilityZone(BaseModel):
    Name: Optional[String] = None


class AvailabilityZonesList(RootModel[List[String]]):
    root: List[String]


class CacheClusterIdList(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=20)


class CacheEngineVersion(BaseModel):
    CacheEngineDescription: Optional[String] = None
    CacheEngineVersionDescription: Optional[String] = None
    CacheParameterGroupFamily: Optional[String] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None


class CacheEngineVersionList(RootModel[List[CacheEngineVersion]]):
    root: List[CacheEngineVersion]


class CacheEngineVersionMessage(BaseModel):
    CacheEngineVersions: Optional[CacheEngineVersionList] = None
    Marker: Optional[String] = None


class CacheNodeIdsList(RootModel[List[String]]):
    root: List[String]


class CacheNodeTypeSpecificValue(BaseModel):
    CacheNodeType: Optional[String] = None
    Value: Optional[String] = None


class CacheNodeTypeSpecificValueList(RootModel[List[CacheNodeTypeSpecificValue]]):
    root: List[CacheNodeTypeSpecificValue]


class CacheNodeUpdateStatus(BaseModel):
    CacheNodeId: Optional[String] = None
    NodeDeletionDate: Optional[TStamp] = None
    NodeUpdateEndDate: Optional[TStamp] = None
    NodeUpdateInitiatedBy_1: Optional[NodeUpdateInitiatedBy] = Field(
        None, alias='NodeUpdateInitiatedBy'
    )
    NodeUpdateInitiatedDate: Optional[TStamp] = None
    NodeUpdateStartDate: Optional[TStamp] = None
    NodeUpdateStatus_1: Optional[NodeUpdateStatus] = Field(
        None, alias='NodeUpdateStatus'
    )
    NodeUpdateStatusModifiedDate: Optional[TStamp] = None


class CacheNodeUpdateStatusList(RootModel[List[CacheNodeUpdateStatus]]):
    root: List[CacheNodeUpdateStatus]


class CacheParameterGroup(BaseModel):
    ARN: Optional[String] = None
    CacheParameterGroupFamily: Optional[String] = None
    CacheParameterGroupName: Optional[String] = None
    Description: Optional[String] = None
    IsGlobal: Optional[Boolean] = None


class CacheParameterGroupList(RootModel[List[CacheParameterGroup]]):
    root: List[CacheParameterGroup]


class CacheParameterGroupNameMessage(BaseModel):
    CacheParameterGroupName: Optional[String] = None


class CacheParameterGroupStatus(BaseModel):
    CacheNodeIdsToReboot: Optional[CacheNodeIdsList] = None
    CacheParameterGroupName: Optional[String] = None
    ParameterApplyStatus: Optional[String] = None


class CacheParameterGroupsMessage(BaseModel):
    CacheParameterGroups: Optional[CacheParameterGroupList] = None
    Marker: Optional[String] = None


class CacheSecurityGroupMembership(BaseModel):
    CacheSecurityGroupName: Optional[String] = None
    Status: Optional[String] = None


class CacheSecurityGroupMembershipList(RootModel[List[CacheSecurityGroupMembership]]):
    root: List[CacheSecurityGroupMembership]


class CacheSecurityGroupNameList(RootModel[List[String]]):
    root: List[String]


class CloudWatchLogsDestinationDetails(BaseModel):
    LogGroup: Optional[String] = None


class ClusterIdList(RootModel[List[String]]):
    root: List[String]


class CompleteMigrationMessage(BaseModel):
    Force: Optional[Boolean] = None
    ReplicationGroupId: String


class CopySnapshotMessage(BaseModel):
    KmsKeyId: Optional[String] = None
    SourceSnapshotName: String
    Tags: Optional[TagList] = None
    TargetBucket: Optional[String] = None
    TargetSnapshotName: String


class CreateCacheParameterGroupMessage(BaseModel):
    CacheParameterGroupFamily: String
    CacheParameterGroupName: String
    Description: String
    Tags: Optional[TagList] = None


class CreateCacheParameterGroupResult(BaseModel):
    CacheParameterGroup_1: Optional[CacheParameterGroup] = Field(
        None, alias='CacheParameterGroup'
    )


class CreateCacheSecurityGroupMessage(BaseModel):
    CacheSecurityGroupName: String
    Description: String
    Tags: Optional[TagList] = None


class CreateCacheSubnetGroupMessage(BaseModel):
    CacheSubnetGroupDescription: String
    CacheSubnetGroupName: String
    SubnetIds: SubnetIdentifierList
    Tags: Optional[TagList] = None


class CreateGlobalReplicationGroupMessage(BaseModel):
    GlobalReplicationGroupDescription: Optional[String] = None
    GlobalReplicationGroupIdSuffix: String
    PrimaryReplicationGroupId: String


class CreateSnapshotMessage(BaseModel):
    CacheClusterId: Optional[String] = None
    KmsKeyId: Optional[String] = None
    ReplicationGroupId: Optional[String] = None
    SnapshotName: String
    Tags: Optional[TagList] = None


class CreateUserGroupMessage(BaseModel):
    Engine: EngineType
    Tags: Optional[TagList] = None
    UserGroupId: String
    UserIds: Optional[UserIdListInput] = None


class CustomerNodeEndpoint(BaseModel):
    Address: Optional[String] = None
    Port: Optional[IntegerOptional] = None


class CustomerNodeEndpointList(RootModel[List[CustomerNodeEndpoint]]):
    root: List[CustomerNodeEndpoint]


class DeleteCacheClusterMessage(BaseModel):
    CacheClusterId: String
    FinalSnapshotIdentifier: Optional[String] = None


class DeleteCacheParameterGroupMessage(BaseModel):
    CacheParameterGroupName: String


class DeleteCacheSecurityGroupMessage(BaseModel):
    CacheSecurityGroupName: String


class DeleteCacheSubnetGroupMessage(BaseModel):
    CacheSubnetGroupName: String


class DeleteGlobalReplicationGroupMessage(BaseModel):
    GlobalReplicationGroupId: String
    RetainPrimaryReplicationGroup: Boolean


class DeleteReplicationGroupMessage(BaseModel):
    FinalSnapshotIdentifier: Optional[String] = None
    ReplicationGroupId: String
    RetainPrimaryCluster: Optional[BooleanOptional] = None


class DeleteSnapshotMessage(BaseModel):
    SnapshotName: String


class DeleteUserGroupMessage(BaseModel):
    UserGroupId: String


class DeleteUserMessage(BaseModel):
    UserId_1: UserId = Field(..., alias='UserId')


class DescribeCacheClustersMessage(BaseModel):
    CacheClusterId: Optional[String] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    ShowCacheClustersNotInReplicationGroups: Optional[BooleanOptional] = None
    ShowCacheNodeInfo: Optional[BooleanOptional] = None


class DescribeCacheEngineVersionsMessage(BaseModel):
    CacheParameterGroupFamily: Optional[String] = None
    DefaultOnly: Optional[Boolean] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeCacheParameterGroupsMessage(BaseModel):
    CacheParameterGroupName: Optional[String] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeCacheParametersMessage(BaseModel):
    CacheParameterGroupName: String
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    Source: Optional[String] = None


class DescribeCacheSecurityGroupsMessage(BaseModel):
    CacheSecurityGroupName: Optional[String] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeCacheSubnetGroupsMessage(BaseModel):
    CacheSubnetGroupName: Optional[String] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeEngineDefaultParametersMessage(BaseModel):
    CacheParameterGroupFamily: String
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeEventsMessage(BaseModel):
    Duration: Optional[IntegerOptional] = None
    EndTime: Optional[TStamp] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    SourceIdentifier: Optional[String] = None
    SourceType_1: Optional[SourceType] = Field(None, alias='SourceType')
    StartTime: Optional[TStamp] = None


class DescribeGlobalReplicationGroupsMessage(BaseModel):
    GlobalReplicationGroupId: Optional[String] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    ShowMemberInfo: Optional[BooleanOptional] = None


class DescribeReplicationGroupsMessage(BaseModel):
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    ReplicationGroupId: Optional[String] = None


class DescribeReservedCacheNodesMessage(BaseModel):
    CacheNodeType: Optional[String] = None
    Duration: Optional[String] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    OfferingType: Optional[String] = None
    ProductDescription: Optional[String] = None
    ReservedCacheNodeId: Optional[String] = None
    ReservedCacheNodesOfferingId: Optional[String] = None


class DescribeReservedCacheNodesOfferingsMessage(BaseModel):
    CacheNodeType: Optional[String] = None
    Duration: Optional[String] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    OfferingType: Optional[String] = None
    ProductDescription: Optional[String] = None
    ReservedCacheNodesOfferingId: Optional[String] = None


class DescribeServiceUpdatesMessage(BaseModel):
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    ServiceUpdateName: Optional[String] = None
    ServiceUpdateStatus: Optional[ServiceUpdateStatusList] = None


class DescribeSnapshotsMessage(BaseModel):
    CacheClusterId: Optional[String] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    ReplicationGroupId: Optional[String] = None
    ShowNodeGroupConfig: Optional[BooleanOptional] = None
    SnapshotName: Optional[String] = None
    SnapshotSource: Optional[String] = None


class DescribeUserGroupsMessage(BaseModel):
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    UserGroupId: Optional[String] = None


class DisassociateGlobalReplicationGroupMessage(BaseModel):
    GlobalReplicationGroupId: String
    ReplicationGroupId: String
    ReplicationGroupRegion: String


class EC2SecurityGroup(BaseModel):
    EC2SecurityGroupName: Optional[String] = None
    EC2SecurityGroupOwnerId: Optional[String] = None
    Status: Optional[String] = None


class EC2SecurityGroupList(RootModel[List[EC2SecurityGroup]]):
    root: List[EC2SecurityGroup]


class Endpoint(BaseModel):
    Address: Optional[String] = None
    Port: Optional[Integer] = None


class Event(BaseModel):
    Date: Optional[TStamp] = None
    Message: Optional[String] = None
    SourceIdentifier: Optional[String] = None
    SourceType_1: Optional[SourceType] = Field(None, alias='SourceType')


class EventList(RootModel[List[Event]]):
    root: List[Event]


class EventsMessage(BaseModel):
    Events: Optional[EventList] = None
    Marker: Optional[String] = None


class FailoverGlobalReplicationGroupMessage(BaseModel):
    GlobalReplicationGroupId: String
    PrimaryRegion: String
    PrimaryReplicationGroupId: String


class Filter(BaseModel):
    Name: FilterName
    Values: FilterValueList


class FilterList(RootModel[List[Filter]]):
    root: List[Filter]


class GlobalNodeGroup(BaseModel):
    GlobalNodeGroupId: Optional[String] = None
    Slots: Optional[String] = None


class GlobalNodeGroupIdList(RootModel[List[String]]):
    root: List[String]


class GlobalNodeGroupList(RootModel[List[GlobalNodeGroup]]):
    root: List[GlobalNodeGroup]


class GlobalReplicationGroupInfo(BaseModel):
    GlobalReplicationGroupId: Optional[String] = None
    GlobalReplicationGroupMemberRole: Optional[String] = None


class GlobalReplicationGroupMember(BaseModel):
    AutomaticFailover: Optional[AutomaticFailoverStatus] = None
    ReplicationGroupId: Optional[String] = None
    ReplicationGroupRegion: Optional[String] = None
    Role: Optional[String] = None
    Status: Optional[String] = None


class GlobalReplicationGroupMemberList(RootModel[List[GlobalReplicationGroupMember]]):
    root: List[GlobalReplicationGroupMember]


class KeyList(RootModel[List[String]]):
    root: List[String]


class KinesisFirehoseDestinationDetails(BaseModel):
    DeliveryStream: Optional[String] = None


class ListAllowedNodeTypeModificationsMessage(BaseModel):
    CacheClusterId: Optional[String] = None
    ReplicationGroupId: Optional[String] = None


class ListTagsForResourceMessage(BaseModel):
    ResourceName: String


class ModifyCacheSubnetGroupMessage(BaseModel):
    CacheSubnetGroupDescription: Optional[String] = None
    CacheSubnetGroupName: String
    SubnetIds: Optional[SubnetIdentifierList] = None


class ModifyGlobalReplicationGroupMessage(BaseModel):
    ApplyImmediately: Boolean
    AutomaticFailoverEnabled: Optional[BooleanOptional] = None
    CacheNodeType: Optional[String] = None
    CacheParameterGroupName: Optional[String] = None
    EngineVersion: Optional[String] = None
    GlobalReplicationGroupDescription: Optional[String] = None
    GlobalReplicationGroupId: String


class ModifyUserGroupMessage(BaseModel):
    UserGroupId: String
    UserIdsToAdd: Optional[UserIdListInput] = None
    UserIdsToRemove: Optional[UserIdListInput] = None


class NodeGroupMember(BaseModel):
    CacheClusterId: Optional[String] = None
    CacheNodeId: Optional[String] = None
    CurrentRole: Optional[String] = None
    PreferredAvailabilityZone: Optional[String] = None
    PreferredOutpostArn: Optional[String] = None
    ReadEndpoint: Optional[Endpoint] = None


class NodeGroupMemberList(RootModel[List[NodeGroupMember]]):
    root: List[NodeGroupMember]


class NodeGroupMemberUpdateStatus(BaseModel):
    CacheClusterId: Optional[String] = None
    CacheNodeId: Optional[String] = None
    NodeDeletionDate: Optional[TStamp] = None
    NodeUpdateEndDate: Optional[TStamp] = None
    NodeUpdateInitiatedBy_1: Optional[NodeUpdateInitiatedBy] = Field(
        None, alias='NodeUpdateInitiatedBy'
    )
    NodeUpdateInitiatedDate: Optional[TStamp] = None
    NodeUpdateStartDate: Optional[TStamp] = None
    NodeUpdateStatus_1: Optional[NodeUpdateStatus] = Field(
        None, alias='NodeUpdateStatus'
    )
    NodeUpdateStatusModifiedDate: Optional[TStamp] = None


class NodeGroupMemberUpdateStatusList(RootModel[List[NodeGroupMemberUpdateStatus]]):
    root: List[NodeGroupMemberUpdateStatus]


class NodeGroupUpdateStatus(BaseModel):
    NodeGroupId: Optional[String] = None
    NodeGroupMemberUpdateStatus: Optional[NodeGroupMemberUpdateStatusList] = None


class NodeGroupUpdateStatusList(RootModel[List[NodeGroupUpdateStatus]]):
    root: List[NodeGroupUpdateStatus]


class NodeTypeList(RootModel[List[String]]):
    root: List[String]


class NotificationConfiguration(BaseModel):
    TopicArn: Optional[String] = None
    TopicStatus: Optional[String] = None


class OutpostArnsList(RootModel[List[String]]):
    root: List[String]


class Parameter(BaseModel):
    AllowedValues: Optional[String] = None
    ChangeType_1: Optional[ChangeType] = Field(None, alias='ChangeType')
    DataType: Optional[String] = None
    Description: Optional[String] = None
    IsModifiable: Optional[Boolean] = None
    MinimumEngineVersion: Optional[String] = None
    ParameterName: Optional[String] = None
    ParameterValue: Optional[String] = None
    Source: Optional[String] = None


class ParameterNameValue(BaseModel):
    ParameterName: Optional[String] = None
    ParameterValue: Optional[String] = None


class ParameterNameValueList(RootModel[List[ParameterNameValue]]):
    root: List[ParameterNameValue]


class ParametersList(RootModel[List[Parameter]]):
    root: List[Parameter]


class PasswordListInput(RootModel[List[String]]):
    root: List[String] = Field(..., min_length=1)


class PreferredAvailabilityZoneList(RootModel[List[String]]):
    root: List[String]


class PreferredOutpostArnList(RootModel[List[String]]):
    root: List[String]


class ProcessedUpdateAction(BaseModel):
    CacheClusterId: Optional[String] = None
    ReplicationGroupId: Optional[String] = None
    ServiceUpdateName: Optional[String] = None
    UpdateActionStatus_1: Optional[UpdateActionStatus] = Field(
        None, alias='UpdateActionStatus'
    )


class ProcessedUpdateActionList(RootModel[List[ProcessedUpdateAction]]):
    root: List[ProcessedUpdateAction]


class PurchaseReservedCacheNodesOfferingMessage(BaseModel):
    CacheNodeCount: Optional[IntegerOptional] = None
    ReservedCacheNodeId: Optional[String] = None
    ReservedCacheNodesOfferingId: String
    Tags: Optional[TagList] = None


class RebalanceSlotsInGlobalReplicationGroupMessage(BaseModel):
    ApplyImmediately: Boolean
    GlobalReplicationGroupId: String


class RebootCacheClusterMessage(BaseModel):
    CacheClusterId: String
    CacheNodeIdsToReboot: CacheNodeIdsList


class RecurringCharge(BaseModel):
    RecurringChargeAmount: Optional[Double] = None
    RecurringChargeFrequency: Optional[String] = None


class RecurringChargeList(RootModel[List[RecurringCharge]]):
    root: List[RecurringCharge]


class RemoveReplicasList(RootModel[List[String]]):
    root: List[String]


class RemoveTagsFromResourceMessage(BaseModel):
    ResourceName: String
    TagKeys: KeyList


class ReplicationGroupIdList(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=20)


class ReplicationGroupOutpostArnList(RootModel[List[String]]):
    root: List[String]


class ReservedCacheNode(BaseModel):
    CacheNodeCount: Optional[Integer] = None
    CacheNodeType: Optional[String] = None
    Duration: Optional[Integer] = None
    FixedPrice: Optional[Double] = None
    OfferingType: Optional[String] = None
    ProductDescription: Optional[String] = None
    RecurringCharges: Optional[RecurringChargeList] = None
    ReservationARN: Optional[String] = None
    ReservedCacheNodeId: Optional[String] = None
    ReservedCacheNodesOfferingId: Optional[String] = None
    StartTime: Optional[TStamp] = None
    State: Optional[String] = None
    UsagePrice: Optional[Double] = None


class ReservedCacheNodeList(RootModel[List[ReservedCacheNode]]):
    root: List[ReservedCacheNode]


class ReservedCacheNodeMessage(BaseModel):
    Marker: Optional[String] = None
    ReservedCacheNodes: Optional[ReservedCacheNodeList] = None


class ReservedCacheNodesOffering(BaseModel):
    CacheNodeType: Optional[String] = None
    Duration: Optional[Integer] = None
    FixedPrice: Optional[Double] = None
    OfferingType: Optional[String] = None
    ProductDescription: Optional[String] = None
    RecurringCharges: Optional[RecurringChargeList] = None
    ReservedCacheNodesOfferingId: Optional[String] = None
    UsagePrice: Optional[Double] = None


class ReservedCacheNodesOfferingList(RootModel[List[ReservedCacheNodesOffering]]):
    root: List[ReservedCacheNodesOffering]


class ReservedCacheNodesOfferingMessage(BaseModel):
    Marker: Optional[String] = None
    ReservedCacheNodesOfferings: Optional[ReservedCacheNodesOfferingList] = None


class ResetCacheParameterGroupMessage(BaseModel):
    CacheParameterGroupName: String
    ParameterNameValues: Optional[ParameterNameValueList] = None
    ResetAllParameters: Optional[Boolean] = None


class ReshardingConfiguration(BaseModel):
    NodeGroupId: Optional[AllowedNodeGroupId] = None
    PreferredAvailabilityZones: Optional[AvailabilityZonesList] = None


class ReshardingConfigurationList(RootModel[List[ReshardingConfiguration]]):
    root: List[ReshardingConfiguration]


class ReshardingStatus(BaseModel):
    SlotMigration_1: Optional[SlotMigration] = Field(None, alias='SlotMigration')


class RevokeCacheSecurityGroupIngressMessage(BaseModel):
    CacheSecurityGroupName: String
    EC2SecurityGroupName: String
    EC2SecurityGroupOwnerId: String


class SecurityGroupIdsList(RootModel[List[String]]):
    root: List[String]


class SecurityGroupMembership(BaseModel):
    SecurityGroupId: Optional[String] = None
    Status: Optional[String] = None


class SecurityGroupMembershipList(RootModel[List[SecurityGroupMembership]]):
    root: List[SecurityGroupMembership]


class ServiceUpdate(BaseModel):
    AutoUpdateAfterRecommendedApplyByDate: Optional[BooleanOptional] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    EstimatedUpdateTime: Optional[String] = None
    ServiceUpdateDescription: Optional[String] = None
    ServiceUpdateEndDate: Optional[TStamp] = None
    ServiceUpdateName: Optional[String] = None
    ServiceUpdateRecommendedApplyByDate: Optional[TStamp] = None
    ServiceUpdateReleaseDate: Optional[TStamp] = None
    ServiceUpdateSeverity_1: Optional[ServiceUpdateSeverity] = Field(
        None, alias='ServiceUpdateSeverity'
    )
    ServiceUpdateStatus_1: Optional[ServiceUpdateStatus] = Field(
        None, alias='ServiceUpdateStatus'
    )
    ServiceUpdateType_1: Optional[ServiceUpdateType] = Field(
        None, alias='ServiceUpdateType'
    )


class ServiceUpdateList(RootModel[List[ServiceUpdate]]):
    root: List[ServiceUpdate]


class ServiceUpdatesMessage(BaseModel):
    Marker: Optional[String] = None
    ServiceUpdates: Optional[ServiceUpdateList] = None


class SnapshotArnsList(RootModel[List[String]]):
    root: List[String]


class StartMigrationMessage(BaseModel):
    CustomerNodeEndpointList_1: CustomerNodeEndpointList = Field(
        ..., alias='CustomerNodeEndpointList'
    )
    ReplicationGroupId: String


class Subnet(BaseModel):
    SubnetAvailabilityZone: Optional[AvailabilityZone] = None
    SubnetIdentifier: Optional[String] = None
    SubnetOutpost_1: Optional[SubnetOutpost] = Field(None, alias='SubnetOutpost')
    SupportedNetworkTypes: Optional[NetworkTypeList] = None


class SubnetList(RootModel[List[Subnet]]):
    root: List[Subnet]


class UpdateAction(BaseModel):
    CacheClusterId: Optional[String] = None
    CacheNodeUpdateStatus: Optional[CacheNodeUpdateStatusList] = None
    Engine: Optional[String] = None
    EstimatedUpdateTime: Optional[String] = None
    NodeGroupUpdateStatus: Optional[NodeGroupUpdateStatusList] = None
    NodesUpdated: Optional[String] = None
    ReplicationGroupId: Optional[String] = None
    ServiceUpdateName: Optional[String] = None
    ServiceUpdateRecommendedApplyByDate: Optional[TStamp] = None
    ServiceUpdateReleaseDate: Optional[TStamp] = None
    ServiceUpdateSeverity_1: Optional[ServiceUpdateSeverity] = Field(
        None, alias='ServiceUpdateSeverity'
    )
    ServiceUpdateStatus_1: Optional[ServiceUpdateStatus] = Field(
        None, alias='ServiceUpdateStatus'
    )
    ServiceUpdateType_1: Optional[ServiceUpdateType] = Field(
        None, alias='ServiceUpdateType'
    )
    SlaMet_1: Optional[SlaMet] = Field(None, alias='SlaMet')
    UpdateActionAvailableDate: Optional[TStamp] = None
    UpdateActionStatus_1: Optional[UpdateActionStatus] = Field(
        None, alias='UpdateActionStatus'
    )
    UpdateActionStatusModifiedDate: Optional[TStamp] = None


class UpdateActionList(RootModel[List[UpdateAction]]):
    root: List[UpdateAction]


class UpdateActionResultsMessage(BaseModel):
    ProcessedUpdateActions: Optional[ProcessedUpdateActionList] = None
    UnprocessedUpdateActions: Optional[UnprocessedUpdateActionList] = None


class UpdateActionsMessage(BaseModel):
    Marker: Optional[String] = None
    UpdateActions: Optional[UpdateActionList] = None


class User(BaseModel):
    ARN: Optional[String] = None
    AccessString: Optional[String] = None
    Authentication_1: Optional[Authentication] = Field(None, alias='Authentication')
    Engine: Optional[EngineType] = None
    MinimumEngineVersion: Optional[String] = None
    Status: Optional[String] = None
    UserGroupIds: Optional[UserGroupIdList] = None
    UserId: Optional[String] = None
    UserName: Optional[String] = None


class UserGroupPendingChanges(BaseModel):
    UserIdsToAdd: Optional[UserIdList] = None
    UserIdsToRemove: Optional[UserIdList] = None


class UserList(RootModel[List[User]]):
    root: List[User]


class AuthenticationMode(BaseModel):
    Passwords: Optional[PasswordListInput] = None
    Type: Optional[InputAuthenticationType] = None


class Filters(RootModel[List[Filter]]):
    root: List[Filter]


class ParameterNameValues(RootModel[List[ParameterNameValue]]):
    root: List[ParameterNameValue]


class ReshardingConfiguration1(RootModel[List[ReshardingConfiguration]]):
    root: List[ReshardingConfiguration]


class AllowedNodeTypeModificationsMessage(BaseModel):
    ScaleDownModifications: Optional[NodeTypeList] = None
    ScaleUpModifications: Optional[NodeTypeList] = None


class BatchApplyUpdateActionMessage(BaseModel):
    CacheClusterIds: Optional[CacheClusterIdList] = None
    ReplicationGroupIds: Optional[ReplicationGroupIdList] = None
    ServiceUpdateName: String


class BatchStopUpdateActionMessage(BaseModel):
    CacheClusterIds: Optional[CacheClusterIdList] = None
    ReplicationGroupIds: Optional[ReplicationGroupIdList] = None
    ServiceUpdateName: String


class CacheNode(BaseModel):
    CacheNodeCreateTime: Optional[TStamp] = None
    CacheNodeId: Optional[String] = None
    CacheNodeStatus: Optional[String] = None
    CustomerAvailabilityZone: Optional[String] = None
    CustomerOutpostArn: Optional[String] = None
    Endpoint_1: Optional[Endpoint] = Field(None, alias='Endpoint')
    ParameterGroupStatus: Optional[String] = None
    SourceCacheNodeId: Optional[String] = None


class CacheNodeList(RootModel[List[CacheNode]]):
    root: List[CacheNode]


class CacheNodeTypeSpecificParameter(BaseModel):
    AllowedValues: Optional[String] = None
    CacheNodeTypeSpecificValues: Optional[CacheNodeTypeSpecificValueList] = None
    ChangeType_1: Optional[ChangeType] = Field(None, alias='ChangeType')
    DataType: Optional[String] = None
    Description: Optional[String] = None
    IsModifiable: Optional[Boolean] = None
    MinimumEngineVersion: Optional[String] = None
    ParameterName: Optional[String] = None
    Source: Optional[String] = None


class CacheNodeTypeSpecificParametersList(
    RootModel[List[CacheNodeTypeSpecificParameter]]
):
    root: List[CacheNodeTypeSpecificParameter]


class CacheParameterGroupDetails(BaseModel):
    CacheNodeTypeSpecificParameters: Optional[CacheNodeTypeSpecificParametersList] = (
        None
    )
    Marker: Optional[String] = None
    Parameters: Optional[ParametersList] = None


class CacheSecurityGroup(BaseModel):
    ARN: Optional[String] = None
    CacheSecurityGroupName: Optional[String] = None
    Description: Optional[String] = None
    EC2SecurityGroups: Optional[EC2SecurityGroupList] = None
    OwnerId: Optional[String] = None


class CacheSecurityGroups(RootModel[List[CacheSecurityGroup]]):
    root: List[CacheSecurityGroup]


class CacheSubnetGroup(BaseModel):
    ARN: Optional[String] = None
    CacheSubnetGroupDescription: Optional[String] = None
    CacheSubnetGroupName: Optional[String] = None
    Subnets: Optional[SubnetList] = None
    SupportedNetworkTypes: Optional[NetworkTypeList] = None
    VpcId: Optional[String] = None


class CacheSubnetGroups(RootModel[List[CacheSubnetGroup]]):
    root: List[CacheSubnetGroup]


class ConfigureShard(BaseModel):
    NewReplicaCount: Integer
    NodeGroupId: AllowedNodeGroupId
    PreferredAvailabilityZones: Optional[PreferredAvailabilityZoneList] = None
    PreferredOutpostArns: Optional[PreferredOutpostArnList] = None


class CreateCacheSecurityGroupResult(BaseModel):
    CacheSecurityGroup_1: Optional[CacheSecurityGroup] = Field(
        None, alias='CacheSecurityGroup'
    )


class CreateCacheSubnetGroupResult(BaseModel):
    CacheSubnetGroup_1: Optional[CacheSubnetGroup] = Field(
        None, alias='CacheSubnetGroup'
    )


class CreateUserMessage(BaseModel):
    AccessString_1: AccessString = Field(..., alias='AccessString')
    AuthenticationMode_1: Optional[AuthenticationMode] = Field(
        None, alias='AuthenticationMode'
    )
    Engine: EngineType
    NoPasswordRequired: Optional[BooleanOptional] = None
    Passwords: Optional[PasswordListInput] = None
    Tags: Optional[TagList] = None
    UserId_1: UserId = Field(..., alias='UserId')
    UserName_1: UserName = Field(..., alias='UserName')


class DecreaseNodeGroupsInGlobalReplicationGroupMessage(BaseModel):
    ApplyImmediately: Boolean
    GlobalNodeGroupsToRemove: Optional[GlobalNodeGroupIdList] = None
    GlobalNodeGroupsToRetain: Optional[GlobalNodeGroupIdList] = None
    GlobalReplicationGroupId: String
    NodeGroupCount: Integer


class DescribeUpdateActionsMessage(BaseModel):
    CacheClusterIds: Optional[CacheClusterIdList] = None
    Engine: Optional[String] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    ReplicationGroupIds: Optional[ReplicationGroupIdList] = None
    ServiceUpdateName: Optional[String] = None
    ServiceUpdateStatus: Optional[ServiceUpdateStatusList] = None
    ServiceUpdateTimeRange: Optional[TimeRangeFilter] = None
    ShowNodeLevelUpdateStatus: Optional[BooleanOptional] = None
    UpdateActionStatus: Optional[UpdateActionStatusList] = None


class DescribeUsersMessage(BaseModel):
    Engine: Optional[EngineType] = None
    Filters: Optional[FilterList] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    UserId_1: Optional[UserId] = Field(None, alias='UserId')


class DescribeUsersResult(BaseModel):
    Marker: Optional[String] = None
    Users: Optional[UserList] = None


class DestinationDetails(BaseModel):
    CloudWatchLogsDetails: Optional[CloudWatchLogsDestinationDetails] = None
    KinesisFirehoseDetails: Optional[KinesisFirehoseDestinationDetails] = None


class EngineDefaults(BaseModel):
    CacheNodeTypeSpecificParameters: Optional[CacheNodeTypeSpecificParametersList] = (
        None
    )
    CacheParameterGroupFamily: Optional[String] = None
    Marker: Optional[String] = None
    Parameters: Optional[ParametersList] = None


class GlobalReplicationGroup(BaseModel):
    ARN: Optional[String] = None
    AtRestEncryptionEnabled: Optional[BooleanOptional] = None
    AuthTokenEnabled: Optional[BooleanOptional] = None
    CacheNodeType: Optional[String] = None
    ClusterEnabled: Optional[BooleanOptional] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    GlobalNodeGroups: Optional[GlobalNodeGroupList] = None
    GlobalReplicationGroupDescription: Optional[String] = None
    GlobalReplicationGroupId: Optional[String] = None
    Members: Optional[GlobalReplicationGroupMemberList] = None
    Status: Optional[String] = None
    TransitEncryptionEnabled: Optional[BooleanOptional] = None


class GlobalReplicationGroupList(RootModel[List[GlobalReplicationGroup]]):
    root: List[GlobalReplicationGroup]


class IncreaseNodeGroupsInGlobalReplicationGroupResult(BaseModel):
    GlobalReplicationGroup_1: Optional[GlobalReplicationGroup] = Field(
        None, alias='GlobalReplicationGroup'
    )


class LogDeliveryConfiguration(BaseModel):
    DestinationDetails_1: Optional[DestinationDetails] = Field(
        None, alias='DestinationDetails'
    )
    DestinationType_1: Optional[DestinationType] = Field(None, alias='DestinationType')
    LogFormat_1: Optional[LogFormat] = Field(None, alias='LogFormat')
    LogType_1: Optional[LogType] = Field(None, alias='LogType')
    Message: Optional[String] = None
    Status: Optional[LogDeliveryConfigurationStatus] = None


class LogDeliveryConfigurationList(RootModel[List[LogDeliveryConfiguration]]):
    root: List[LogDeliveryConfiguration]


class LogDeliveryConfigurationRequest(BaseModel):
    DestinationDetails_1: Optional[DestinationDetails] = Field(
        None, alias='DestinationDetails'
    )
    DestinationType_1: Optional[DestinationType] = Field(None, alias='DestinationType')
    Enabled: Optional[BooleanOptional] = None
    LogFormat_1: Optional[LogFormat] = Field(None, alias='LogFormat')
    LogType_1: Optional[LogType] = Field(None, alias='LogType')


class LogDeliveryConfigurationRequestList(
    RootModel[List[LogDeliveryConfigurationRequest]]
):
    root: List[LogDeliveryConfigurationRequest]


class ModifyCacheClusterMessage(BaseModel):
    AZMode_1: Optional[AZMode] = Field(None, alias='AZMode')
    ApplyImmediately: Optional[Boolean] = None
    AuthToken: Optional[String] = None
    AuthTokenUpdateStrategy: Optional[AuthTokenUpdateStrategyType] = None
    AutoMinorVersionUpgrade: Optional[BooleanOptional] = None
    CacheClusterId: String
    CacheNodeIdsToRemove: Optional[CacheNodeIdsList] = None
    CacheNodeType: Optional[String] = None
    CacheParameterGroupName: Optional[String] = None
    CacheSecurityGroupNames: Optional[CacheSecurityGroupNameList] = None
    EngineVersion: Optional[String] = None
    IpDiscovery_1: Optional[IpDiscovery] = Field(None, alias='IpDiscovery')
    LogDeliveryConfigurations: Optional[LogDeliveryConfigurationRequestList] = None
    NewAvailabilityZones: Optional[PreferredAvailabilityZoneList] = None
    NotificationTopicArn: Optional[String] = None
    NotificationTopicStatus: Optional[String] = None
    NumCacheNodes: Optional[IntegerOptional] = None
    PreferredMaintenanceWindow: Optional[String] = None
    SecurityGroupIds: Optional[SecurityGroupIdsList] = None
    SnapshotRetentionLimit: Optional[IntegerOptional] = None
    SnapshotWindow: Optional[String] = None


class ModifyCacheParameterGroupMessage(BaseModel):
    CacheParameterGroupName: String
    ParameterNameValues: ParameterNameValueList


class ModifyCacheSubnetGroupResult(BaseModel):
    CacheSubnetGroup_1: Optional[CacheSubnetGroup] = Field(
        None, alias='CacheSubnetGroup'
    )


class ModifyGlobalReplicationGroupResult(BaseModel):
    GlobalReplicationGroup_1: Optional[GlobalReplicationGroup] = Field(
        None, alias='GlobalReplicationGroup'
    )


class ModifyReplicationGroupMessage(BaseModel):
    ApplyImmediately: Optional[Boolean] = None
    AuthToken: Optional[String] = None
    AuthTokenUpdateStrategy: Optional[AuthTokenUpdateStrategyType] = None
    AutoMinorVersionUpgrade: Optional[BooleanOptional] = None
    AutomaticFailoverEnabled: Optional[BooleanOptional] = None
    CacheNodeType: Optional[String] = None
    CacheParameterGroupName: Optional[String] = None
    CacheSecurityGroupNames: Optional[CacheSecurityGroupNameList] = None
    EngineVersion: Optional[String] = None
    IpDiscovery_1: Optional[IpDiscovery] = Field(None, alias='IpDiscovery')
    LogDeliveryConfigurations: Optional[LogDeliveryConfigurationRequestList] = None
    MultiAZEnabled: Optional[BooleanOptional] = None
    NodeGroupId: Optional[String] = None
    NotificationTopicArn: Optional[String] = None
    NotificationTopicStatus: Optional[String] = None
    PreferredMaintenanceWindow: Optional[String] = None
    PrimaryClusterId: Optional[String] = None
    RemoveUserGroups: Optional[BooleanOptional] = None
    ReplicationGroupDescription: Optional[String] = None
    ReplicationGroupId: String
    SecurityGroupIds: Optional[SecurityGroupIdsList] = None
    SnapshotRetentionLimit: Optional[IntegerOptional] = None
    SnapshotWindow: Optional[String] = None
    SnapshottingClusterId: Optional[String] = None
    TransitEncryptionEnabled: Optional[BooleanOptional] = None
    TransitEncryptionMode_1: Optional[TransitEncryptionMode] = Field(
        None, alias='TransitEncryptionMode'
    )
    UserGroupIdsToAdd: Optional[UserGroupIdList] = None
    UserGroupIdsToRemove: Optional[UserGroupIdList] = None


class ModifyReplicationGroupShardConfigurationMessage(BaseModel):
    ApplyImmediately: Boolean
    NodeGroupCount: Integer
    NodeGroupsToRemove: Optional[NodeGroupsToRemoveList] = None
    NodeGroupsToRetain: Optional[NodeGroupsToRetainList] = None
    ReplicationGroupId: String
    ReshardingConfiguration: Optional[ReshardingConfigurationList] = None


class ModifyUserMessage(BaseModel):
    AccessString_1: Optional[AccessString] = Field(None, alias='AccessString')
    AppendAccessString: Optional[AccessString] = None
    AuthenticationMode_1: Optional[AuthenticationMode] = Field(
        None, alias='AuthenticationMode'
    )
    NoPasswordRequired: Optional[BooleanOptional] = None
    Passwords: Optional[PasswordListInput] = None
    UserId_1: UserId = Field(..., alias='UserId')


class NodeGroup(BaseModel):
    NodeGroupId: Optional[String] = None
    NodeGroupMembers: Optional[NodeGroupMemberList] = None
    PrimaryEndpoint: Optional[Endpoint] = None
    ReaderEndpoint: Optional[Endpoint] = None
    Slots: Optional[String] = None
    Status: Optional[String] = None


class NodeGroupConfiguration(BaseModel):
    NodeGroupId: Optional[AllowedNodeGroupId] = None
    PrimaryAvailabilityZone: Optional[String] = None
    PrimaryOutpostArn: Optional[String] = None
    ReplicaAvailabilityZones: Optional[AvailabilityZonesList] = None
    ReplicaCount: Optional[IntegerOptional] = None
    ReplicaOutpostArns: Optional[OutpostArnsList] = None
    Slots: Optional[String] = None


class NodeGroupConfigurationList(RootModel[List[NodeGroupConfiguration]]):
    root: List[NodeGroupConfiguration]


class NodeGroupList(RootModel[List[NodeGroup]]):
    root: List[NodeGroup]


class NodeSnapshot(BaseModel):
    CacheClusterId: Optional[String] = None
    CacheNodeCreateTime: Optional[TStamp] = None
    CacheNodeId: Optional[String] = None
    CacheSize: Optional[String] = None
    NodeGroupConfiguration_1: Optional[NodeGroupConfiguration] = Field(
        None, alias='NodeGroupConfiguration'
    )
    NodeGroupId: Optional[String] = None
    SnapshotCreateTime: Optional[TStamp] = None


class NodeSnapshotList(RootModel[List[NodeSnapshot]]):
    root: List[NodeSnapshot]


class PendingLogDeliveryConfiguration(BaseModel):
    DestinationDetails_1: Optional[DestinationDetails] = Field(
        None, alias='DestinationDetails'
    )
    DestinationType_1: Optional[DestinationType] = Field(None, alias='DestinationType')
    LogFormat_1: Optional[LogFormat] = Field(None, alias='LogFormat')
    LogType_1: Optional[LogType] = Field(None, alias='LogType')


class PendingLogDeliveryConfigurationList(
    RootModel[List[PendingLogDeliveryConfiguration]]
):
    root: List[PendingLogDeliveryConfiguration]


class PendingModifiedValues(BaseModel):
    AuthTokenStatus: Optional[AuthTokenUpdateStatus] = None
    CacheNodeIdsToRemove: Optional[CacheNodeIdsList] = None
    CacheNodeType: Optional[String] = None
    EngineVersion: Optional[String] = None
    LogDeliveryConfigurations: Optional[PendingLogDeliveryConfigurationList] = None
    NumCacheNodes: Optional[IntegerOptional] = None
    TransitEncryptionEnabled: Optional[BooleanOptional] = None
    TransitEncryptionMode_1: Optional[TransitEncryptionMode] = Field(
        None, alias='TransitEncryptionMode'
    )


class PurchaseReservedCacheNodesOfferingResult(BaseModel):
    ReservedCacheNode_1: Optional[ReservedCacheNode] = Field(
        None, alias='ReservedCacheNode'
    )


class RebalanceSlotsInGlobalReplicationGroupResult(BaseModel):
    GlobalReplicationGroup_1: Optional[GlobalReplicationGroup] = Field(
        None, alias='GlobalReplicationGroup'
    )


class RegionalConfiguration(BaseModel):
    ReplicationGroupId: String
    ReplicationGroupRegion: String
    ReshardingConfiguration: ReshardingConfigurationList


class RegionalConfigurationList(RootModel[List[RegionalConfiguration]]):
    root: List[RegionalConfiguration]


class ReplicaConfigurationList(RootModel[List[ConfigureShard]]):
    root: List[ConfigureShard]


class ReplicationGroupPendingModifiedValues(BaseModel):
    AuthTokenStatus: Optional[AuthTokenUpdateStatus] = None
    AutomaticFailoverStatus: Optional[PendingAutomaticFailoverStatus] = None
    LogDeliveryConfigurations: Optional[PendingLogDeliveryConfigurationList] = None
    PrimaryClusterId: Optional[String] = None
    Resharding: Optional[ReshardingStatus] = None
    TransitEncryptionEnabled: Optional[BooleanOptional] = None
    TransitEncryptionMode_1: Optional[TransitEncryptionMode] = Field(
        None, alias='TransitEncryptionMode'
    )
    UserGroups: Optional[UserGroupsUpdateStatus] = None


class RevokeCacheSecurityGroupIngressResult(BaseModel):
    CacheSecurityGroup_1: Optional[CacheSecurityGroup] = Field(
        None, alias='CacheSecurityGroup'
    )


class Snapshot(BaseModel):
    ARN: Optional[String] = None
    AutoMinorVersionUpgrade: Optional[Boolean] = None
    AutomaticFailover: Optional[AutomaticFailoverStatus] = None
    CacheClusterCreateTime: Optional[TStamp] = None
    CacheClusterId: Optional[String] = None
    CacheNodeType: Optional[String] = None
    CacheParameterGroupName: Optional[String] = None
    CacheSubnetGroupName: Optional[String] = None
    DataTiering: Optional[DataTieringStatus] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    KmsKeyId: Optional[String] = None
    NodeSnapshots: Optional[NodeSnapshotList] = None
    NumCacheNodes: Optional[IntegerOptional] = None
    NumNodeGroups: Optional[IntegerOptional] = None
    Port: Optional[IntegerOptional] = None
    PreferredAvailabilityZone: Optional[String] = None
    PreferredMaintenanceWindow: Optional[String] = None
    PreferredOutpostArn: Optional[String] = None
    ReplicationGroupDescription: Optional[String] = None
    ReplicationGroupId: Optional[String] = None
    SnapshotName: Optional[String] = None
    SnapshotRetentionLimit: Optional[IntegerOptional] = None
    SnapshotSource: Optional[String] = None
    SnapshotStatus: Optional[String] = None
    SnapshotWindow: Optional[String] = None
    TopicArn: Optional[String] = None
    VpcId: Optional[String] = None


class SnapshotList(RootModel[List[Snapshot]]):
    root: List[Snapshot]


class UserGroup(BaseModel):
    ARN: Optional[String] = None
    Engine: Optional[EngineType] = None
    MinimumEngineVersion: Optional[String] = None
    PendingChanges: Optional[UserGroupPendingChanges] = None
    ReplicationGroups: Optional[UGReplicationGroupIdList] = None
    Status: Optional[String] = None
    UserGroupId: Optional[String] = None
    UserIds: Optional[UserIdList] = None


class UserGroupList(RootModel[List[UserGroup]]):
    root: List[UserGroup]


class LogDeliveryConfigurations(RootModel[List[LogDeliveryConfigurationRequest]]):
    root: List[LogDeliveryConfigurationRequest]


class NodeGroupConfiguration1(RootModel[List[NodeGroupConfiguration]]):
    root: List[NodeGroupConfiguration]


class ReplicaConfiguration(RootModel[List[ConfigureShard]]):
    root: List[ConfigureShard]


class RegionalConfigurations(RootModel[List[RegionalConfiguration]]):
    root: List[RegionalConfiguration]


class AuthorizeCacheSecurityGroupIngressResult(BaseModel):
    CacheSecurityGroup_1: Optional[CacheSecurityGroup] = Field(
        None, alias='CacheSecurityGroup'
    )


class CacheCluster(BaseModel):
    ARN: Optional[String] = None
    AtRestEncryptionEnabled: Optional[BooleanOptional] = None
    AuthTokenEnabled: Optional[BooleanOptional] = None
    AuthTokenLastModifiedDate: Optional[TStamp] = None
    AutoMinorVersionUpgrade: Optional[Boolean] = None
    CacheClusterCreateTime: Optional[TStamp] = None
    CacheClusterId: Optional[String] = None
    CacheClusterStatus: Optional[String] = None
    CacheNodeType: Optional[String] = None
    CacheNodes: Optional[CacheNodeList] = None
    CacheParameterGroup: Optional[CacheParameterGroupStatus] = None
    CacheSecurityGroups: Optional[CacheSecurityGroupMembershipList] = None
    CacheSubnetGroupName: Optional[String] = None
    ClientDownloadLandingPage: Optional[String] = None
    ConfigurationEndpoint: Optional[Endpoint] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    IpDiscovery_1: Optional[IpDiscovery] = Field(None, alias='IpDiscovery')
    LogDeliveryConfigurations: Optional[LogDeliveryConfigurationList] = None
    NetworkType_1: Optional[NetworkType] = Field(None, alias='NetworkType')
    NotificationConfiguration_1: Optional[NotificationConfiguration] = Field(
        None, alias='NotificationConfiguration'
    )
    NumCacheNodes: Optional[IntegerOptional] = None
    PendingModifiedValues_1: Optional[PendingModifiedValues] = Field(
        None, alias='PendingModifiedValues'
    )
    PreferredAvailabilityZone: Optional[String] = None
    PreferredMaintenanceWindow: Optional[String] = None
    PreferredOutpostArn: Optional[String] = None
    ReplicationGroupId: Optional[String] = None
    ReplicationGroupLogDeliveryEnabled: Optional[Boolean] = None
    SecurityGroups: Optional[SecurityGroupMembershipList] = None
    SnapshotRetentionLimit: Optional[IntegerOptional] = None
    SnapshotWindow: Optional[String] = None
    TransitEncryptionEnabled: Optional[BooleanOptional] = None
    TransitEncryptionMode_1: Optional[TransitEncryptionMode] = Field(
        None, alias='TransitEncryptionMode'
    )


class CacheClusterList(RootModel[List[CacheCluster]]):
    root: List[CacheCluster]


class CacheClusterMessage(BaseModel):
    CacheClusters: Optional[CacheClusterList] = None
    Marker: Optional[String] = None


class CacheSecurityGroupMessage(BaseModel):
    CacheSecurityGroups_1: Optional[CacheSecurityGroups] = Field(
        None, alias='CacheSecurityGroups'
    )
    Marker: Optional[String] = None


class CacheSubnetGroupMessage(BaseModel):
    CacheSubnetGroups_1: Optional[CacheSubnetGroups] = Field(
        None, alias='CacheSubnetGroups'
    )
    Marker: Optional[String] = None


class CopySnapshotResult(BaseModel):
    Snapshot_1: Optional[Snapshot] = Field(None, alias='Snapshot')


class CreateCacheClusterMessage(BaseModel):
    AZMode_1: Optional[AZMode] = Field(None, alias='AZMode')
    AuthToken: Optional[String] = None
    AutoMinorVersionUpgrade: Optional[BooleanOptional] = None
    CacheClusterId: String
    CacheNodeType: Optional[String] = None
    CacheParameterGroupName: Optional[String] = None
    CacheSecurityGroupNames: Optional[CacheSecurityGroupNameList] = None
    CacheSubnetGroupName: Optional[String] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    IpDiscovery_1: Optional[IpDiscovery] = Field(None, alias='IpDiscovery')
    LogDeliveryConfigurations: Optional[LogDeliveryConfigurationRequestList] = None
    NetworkType_1: Optional[NetworkType] = Field(None, alias='NetworkType')
    NotificationTopicArn: Optional[String] = None
    NumCacheNodes: Optional[IntegerOptional] = None
    OutpostMode_1: Optional[OutpostMode] = Field(None, alias='OutpostMode')
    Port: Optional[IntegerOptional] = None
    PreferredAvailabilityZone: Optional[String] = None
    PreferredAvailabilityZones: Optional[PreferredAvailabilityZoneList] = None
    PreferredMaintenanceWindow: Optional[String] = None
    PreferredOutpostArn: Optional[String] = None
    PreferredOutpostArns: Optional[PreferredOutpostArnList] = None
    ReplicationGroupId: Optional[String] = None
    SecurityGroupIds: Optional[SecurityGroupIdsList] = None
    SnapshotArns: Optional[SnapshotArnsList] = None
    SnapshotName: Optional[String] = None
    SnapshotRetentionLimit: Optional[IntegerOptional] = None
    SnapshotWindow: Optional[String] = None
    Tags: Optional[TagList] = None
    TransitEncryptionEnabled: Optional[BooleanOptional] = None


class CreateCacheClusterResult(BaseModel):
    CacheCluster_1: Optional[CacheCluster] = Field(None, alias='CacheCluster')


class CreateGlobalReplicationGroupResult(BaseModel):
    GlobalReplicationGroup_1: Optional[GlobalReplicationGroup] = Field(
        None, alias='GlobalReplicationGroup'
    )


class CreateReplicationGroupMessage(BaseModel):
    AtRestEncryptionEnabled: Optional[BooleanOptional] = None
    AuthToken: Optional[String] = None
    AutoMinorVersionUpgrade: Optional[BooleanOptional] = None
    AutomaticFailoverEnabled: Optional[BooleanOptional] = None
    CacheNodeType: Optional[String] = None
    CacheParameterGroupName: Optional[String] = None
    CacheSecurityGroupNames: Optional[CacheSecurityGroupNameList] = None
    CacheSubnetGroupName: Optional[String] = None
    DataTieringEnabled: Optional[BooleanOptional] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    GlobalReplicationGroupId: Optional[String] = None
    IpDiscovery_1: Optional[IpDiscovery] = Field(None, alias='IpDiscovery')
    KmsKeyId: Optional[String] = None
    LogDeliveryConfigurations: Optional[LogDeliveryConfigurationRequestList] = None
    MultiAZEnabled: Optional[BooleanOptional] = None
    NetworkType_1: Optional[NetworkType] = Field(None, alias='NetworkType')
    NodeGroupConfiguration: Optional[NodeGroupConfigurationList] = None
    NotificationTopicArn: Optional[String] = None
    NumCacheClusters: Optional[IntegerOptional] = None
    NumNodeGroups: Optional[IntegerOptional] = None
    Port: Optional[IntegerOptional] = None
    PreferredCacheClusterAZs: Optional[AvailabilityZonesList] = None
    PreferredMaintenanceWindow: Optional[String] = None
    PrimaryClusterId: Optional[String] = None
    ReplicasPerNodeGroup: Optional[IntegerOptional] = None
    ReplicationGroupDescription: String
    ReplicationGroupId: String
    SecurityGroupIds: Optional[SecurityGroupIdsList] = None
    SnapshotArns: Optional[SnapshotArnsList] = None
    SnapshotName: Optional[String] = None
    SnapshotRetentionLimit: Optional[IntegerOptional] = None
    SnapshotWindow: Optional[String] = None
    Tags: Optional[TagList] = None
    TransitEncryptionEnabled: Optional[BooleanOptional] = None
    TransitEncryptionMode_1: Optional[TransitEncryptionMode] = Field(
        None, alias='TransitEncryptionMode'
    )
    UserGroupIds: Optional[UserGroupIdListInput] = None


class CreateSnapshotResult(BaseModel):
    Snapshot_1: Optional[Snapshot] = Field(None, alias='Snapshot')


class DecreaseNodeGroupsInGlobalReplicationGroupResult(BaseModel):
    GlobalReplicationGroup_1: Optional[GlobalReplicationGroup] = Field(
        None, alias='GlobalReplicationGroup'
    )


class DecreaseReplicaCountMessage(BaseModel):
    ApplyImmediately: Boolean
    NewReplicaCount: Optional[IntegerOptional] = None
    ReplicaConfiguration: Optional[ReplicaConfigurationList] = None
    ReplicasToRemove: Optional[RemoveReplicasList] = None
    ReplicationGroupId: String


class DeleteCacheClusterResult(BaseModel):
    CacheCluster_1: Optional[CacheCluster] = Field(None, alias='CacheCluster')


class DeleteGlobalReplicationGroupResult(BaseModel):
    GlobalReplicationGroup_1: Optional[GlobalReplicationGroup] = Field(
        None, alias='GlobalReplicationGroup'
    )


class DeleteSnapshotResult(BaseModel):
    Snapshot_1: Optional[Snapshot] = Field(None, alias='Snapshot')


class DescribeEngineDefaultParametersResult(BaseModel):
    EngineDefaults_1: Optional[EngineDefaults] = Field(None, alias='EngineDefaults')


class DescribeGlobalReplicationGroupsResult(BaseModel):
    GlobalReplicationGroups: Optional[GlobalReplicationGroupList] = None
    Marker: Optional[String] = None


class DescribeSnapshotsListMessage(BaseModel):
    Marker: Optional[String] = None
    Snapshots: Optional[SnapshotList] = None


class DescribeUserGroupsResult(BaseModel):
    Marker: Optional[String] = None
    UserGroups: Optional[UserGroupList] = None


class DisassociateGlobalReplicationGroupResult(BaseModel):
    GlobalReplicationGroup_1: Optional[GlobalReplicationGroup] = Field(
        None, alias='GlobalReplicationGroup'
    )


class FailoverGlobalReplicationGroupResult(BaseModel):
    GlobalReplicationGroup_1: Optional[GlobalReplicationGroup] = Field(
        None, alias='GlobalReplicationGroup'
    )


class IncreaseNodeGroupsInGlobalReplicationGroupMessage(BaseModel):
    ApplyImmediately: Boolean
    GlobalReplicationGroupId: String
    NodeGroupCount: Integer
    RegionalConfigurations: Optional[RegionalConfigurationList] = None


class IncreaseReplicaCountMessage(BaseModel):
    ApplyImmediately: Boolean
    NewReplicaCount: Optional[IntegerOptional] = None
    ReplicaConfiguration: Optional[ReplicaConfigurationList] = None
    ReplicationGroupId: String


class ModifyCacheClusterResult(BaseModel):
    CacheCluster_1: Optional[CacheCluster] = Field(None, alias='CacheCluster')


class RebootCacheClusterResult(BaseModel):
    CacheCluster_1: Optional[CacheCluster] = Field(None, alias='CacheCluster')


class ReplicationGroup(BaseModel):
    ARN: Optional[String] = None
    AtRestEncryptionEnabled: Optional[BooleanOptional] = None
    AuthTokenEnabled: Optional[BooleanOptional] = None
    AuthTokenLastModifiedDate: Optional[TStamp] = None
    AutoMinorVersionUpgrade: Optional[Boolean] = None
    AutomaticFailover: Optional[AutomaticFailoverStatus] = None
    CacheNodeType: Optional[String] = None
    ClusterEnabled: Optional[BooleanOptional] = None
    ConfigurationEndpoint: Optional[Endpoint] = None
    DataTiering: Optional[DataTieringStatus] = None
    Description: Optional[String] = None
    GlobalReplicationGroupInfo_1: Optional[GlobalReplicationGroupInfo] = Field(
        None, alias='GlobalReplicationGroupInfo'
    )
    IpDiscovery_1: Optional[IpDiscovery] = Field(None, alias='IpDiscovery')
    KmsKeyId: Optional[String] = None
    LogDeliveryConfigurations: Optional[LogDeliveryConfigurationList] = None
    MemberClusters: Optional[ClusterIdList] = None
    MemberClustersOutpostArns: Optional[ReplicationGroupOutpostArnList] = None
    MultiAZ: Optional[MultiAZStatus] = None
    NetworkType_1: Optional[NetworkType] = Field(None, alias='NetworkType')
    NodeGroups: Optional[NodeGroupList] = None
    PendingModifiedValues: Optional[ReplicationGroupPendingModifiedValues] = None
    ReplicationGroupCreateTime: Optional[TStamp] = None
    ReplicationGroupId: Optional[String] = None
    SnapshotRetentionLimit: Optional[IntegerOptional] = None
    SnapshotWindow: Optional[String] = None
    SnapshottingClusterId: Optional[String] = None
    Status: Optional[String] = None
    TransitEncryptionEnabled: Optional[BooleanOptional] = None
    TransitEncryptionMode_1: Optional[TransitEncryptionMode] = Field(
        None, alias='TransitEncryptionMode'
    )
    UserGroupIds: Optional[UserGroupIdList] = None


class ReplicationGroupList(RootModel[List[ReplicationGroup]]):
    root: List[ReplicationGroup]


class ReplicationGroupMessage(BaseModel):
    Marker: Optional[String] = None
    ReplicationGroups: Optional[ReplicationGroupList] = None


class StartMigrationResponse(BaseModel):
    ReplicationGroup_1: Optional[ReplicationGroup] = Field(
        None, alias='ReplicationGroup'
    )


class TestFailoverResult(BaseModel):
    ReplicationGroup_1: Optional[ReplicationGroup] = Field(
        None, alias='ReplicationGroup'
    )


class CompleteMigrationResponse(BaseModel):
    ReplicationGroup_1: Optional[ReplicationGroup] = Field(
        None, alias='ReplicationGroup'
    )


class CreateReplicationGroupResult(BaseModel):
    ReplicationGroup_1: Optional[ReplicationGroup] = Field(
        None, alias='ReplicationGroup'
    )


class DecreaseReplicaCountResult(BaseModel):
    ReplicationGroup_1: Optional[ReplicationGroup] = Field(
        None, alias='ReplicationGroup'
    )


class DeleteReplicationGroupResult(BaseModel):
    ReplicationGroup_1: Optional[ReplicationGroup] = Field(
        None, alias='ReplicationGroup'
    )


class IncreaseReplicaCountResult(BaseModel):
    ReplicationGroup_1: Optional[ReplicationGroup] = Field(
        None, alias='ReplicationGroup'
    )


class ModifyReplicationGroupResult(BaseModel):
    ReplicationGroup_1: Optional[ReplicationGroup] = Field(
        None, alias='ReplicationGroup'
    )


class ModifyReplicationGroupShardConfigurationResult(BaseModel):
    ReplicationGroup_1: Optional[ReplicationGroup] = Field(
        None, alias='ReplicationGroup'
    )
