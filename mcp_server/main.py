# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:12:59+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Query
from pydantic import constr

from models import (
    Action,
    Action4,
    Action8,
    Action12,
    Action16,
    Action20,
    Action24,
    Action28,
    Action32,
    Action36,
    Action40,
    Action44,
    Action48,
    Action52,
    Action56,
    Action60,
    Action64,
    Action68,
    Action72,
    Action76,
    Action80,
    Action84,
    Action88,
    Action92,
    Action96,
    Action100,
    Action104,
    Action108,
    Action112,
    Action116,
    Action120,
    Action124,
    Action128,
    Action132,
    Action136,
    Action140,
    Action144,
    Action148,
    Action152,
    Action156,
    Action160,
    Action164,
    Action168,
    Action172,
    Action176,
    Action180,
    Action184,
    Action188,
    Action192,
    Action196,
    Action200,
    Action204,
    Action208,
    Action212,
    Action216,
    Action220,
    Action224,
    Action228,
    Action232,
    Action236,
    Action240,
    Action244,
    Action248,
    Action252,
    Action256,
    AllowedNodeTypeModificationsMessage,
    APICallRateForCustomerExceededFault,
    AuthenticationMode,
    AuthorizationAlreadyExistsFault,
    AuthorizationNotFoundFault,
    AuthorizeCacheSecurityGroupIngressResult,
    AuthTokenUpdateStrategy,
    AZMode,
    CacheClusterAlreadyExistsFault,
    CacheClusterIds,
    CacheClusterMessage,
    CacheClusterNotFoundFault,
    CacheEngineVersionMessage,
    CacheNodeIdsToReboot,
    CacheNodeIdsToRemove,
    CacheParameterGroupAlreadyExistsFault,
    CacheParameterGroupDetails,
    CacheParameterGroupNameMessage,
    CacheParameterGroupNotFoundFault,
    CacheParameterGroupQuotaExceededFault,
    CacheParameterGroupsMessage,
    CacheSecurityGroupAlreadyExistsFault,
    CacheSecurityGroupMessage,
    CacheSecurityGroupNames,
    CacheSecurityGroupNotFoundFault,
    CacheSecurityGroupQuotaExceededFault,
    CacheSubnetGroupAlreadyExistsFault,
    CacheSubnetGroupInUse,
    CacheSubnetGroupMessage,
    CacheSubnetGroupNotFoundFault,
    CacheSubnetGroupQuotaExceededFault,
    CacheSubnetQuotaExceededFault,
    ClusterQuotaForCustomerExceededFault,
    CompleteMigrationResponse,
    CopySnapshotResult,
    CreateCacheClusterResult,
    CreateCacheParameterGroupResult,
    CreateCacheSecurityGroupResult,
    CreateCacheSubnetGroupResult,
    CreateGlobalReplicationGroupResult,
    CreateReplicationGroupResult,
    CreateSnapshotResult,
    CustomerNodeEndpointList,
    DecreaseNodeGroupsInGlobalReplicationGroupResult,
    DecreaseReplicaCountResult,
    DefaultUserAssociatedToUserGroupFault,
    DefaultUserRequired,
    DeleteCacheClusterResult,
    DeleteGlobalReplicationGroupResult,
    DeleteReplicationGroupResult,
    DeleteSnapshotResult,
    DescribeEngineDefaultParametersResult,
    DescribeGlobalReplicationGroupsResult,
    DescribeSnapshotsListMessage,
    DescribeUserGroupsResult,
    DescribeUsersResult,
    DisassociateGlobalReplicationGroupResult,
    DuplicateUserNameFault,
    EventsMessage,
    FailoverGlobalReplicationGroupResult,
    Filters,
    GlobalNodeGroupsToRemove,
    GlobalNodeGroupsToRetain,
    GlobalReplicationGroupAlreadyExistsFault,
    GlobalReplicationGroupNotFoundFault,
    IncreaseNodeGroupsInGlobalReplicationGroupResult,
    IncreaseReplicaCountResult,
    InsufficientCacheClusterCapacityFault,
    InvalidARNFault,
    InvalidCacheClusterStateFault,
    InvalidCacheParameterGroupStateFault,
    InvalidCacheSecurityGroupStateFault,
    InvalidGlobalReplicationGroupStateFault,
    InvalidKMSKeyFault,
    InvalidParameterCombinationException,
    InvalidParameterValueException,
    InvalidReplicationGroupStateFault,
    InvalidSnapshotStateFault,
    InvalidSubnet,
    InvalidUserGroupStateFault,
    InvalidUserStateFault,
    InvalidVPCNetworkStateFault,
    IpDiscovery,
    LogDeliveryConfigurations,
    ModifyCacheClusterResult,
    ModifyCacheSubnetGroupResult,
    ModifyGlobalReplicationGroupResult,
    ModifyReplicationGroupResult,
    ModifyReplicationGroupShardConfigurationResult,
    NetworkType,
    NewAvailabilityZones,
    NodeGroupConfiguration1,
    NodeGroupNotFoundFault,
    NodeGroupsPerReplicationGroupQuotaExceededFault,
    NodeGroupsToRemove,
    NodeGroupsToRetain,
    NodeQuotaForClusterExceededFault,
    NodeQuotaForCustomerExceededFault,
    NoOperationFault,
    OutpostMode,
    ParameterNameValues,
    Passwords,
    PreferredAvailabilityZones,
    PreferredCacheClusterAZs,
    PreferredOutpostArns,
    PurchaseReservedCacheNodesOfferingResult,
    RebalanceSlotsInGlobalReplicationGroupResult,
    RebootCacheClusterResult,
    RegionalConfigurations,
    ReplicaConfiguration,
    ReplicasToRemove,
    ReplicationGroupAlreadyExistsFault,
    ReplicationGroupAlreadyUnderMigrationFault,
    ReplicationGroupIds,
    ReplicationGroupMessage,
    ReplicationGroupNotFoundFault,
    ReplicationGroupNotUnderMigrationFault,
    ReservedCacheNodeAlreadyExistsFault,
    ReservedCacheNodeMessage,
    ReservedCacheNodeNotFoundFault,
    ReservedCacheNodeQuotaExceededFault,
    ReservedCacheNodesOfferingMessage,
    ReservedCacheNodesOfferingNotFoundFault,
    ReshardingConfiguration1,
    RevokeCacheSecurityGroupIngressResult,
    SecurityGroupIds,
    ServiceLinkedRoleNotFoundFault,
    ServiceUpdateNotFoundFault,
    ServiceUpdatesMessage,
    ServiceUpdateStatus1,
    ServiceUpdateTimeRange,
    SnapshotAlreadyExistsFault,
    SnapshotArns,
    SnapshotFeatureNotSupportedFault,
    SnapshotNotFoundFault,
    SnapshotQuotaExceededFault,
    SourceType,
    StartMigrationResponse,
    SubnetIds,
    SubnetInUse,
    SubnetNotAllowedFault,
    TagKeys,
    TagListMessage,
    TagNotFoundFault,
    TagQuotaPerResourceExceeded,
    Tags,
    TestFailoverNotAvailableFault,
    TestFailoverResult,
    TransitEncryptionMode,
    UpdateActionResultsMessage,
    UpdateActionsMessage,
    UpdateActionStatus1,
    User,
    UserAlreadyExistsFault,
    UserGroup,
    UserGroupAlreadyExistsFault,
    UserGroupIds,
    UserGroupIdsToAdd,
    UserGroupIdsToRemove,
    UserGroupNotFoundFault,
    UserGroupQuotaExceededFault,
    UserIds,
    UserIdsToAdd,
    UserIdsToRemove,
    UserNotFoundFault,
    UserQuotaExceededFault,
    Version,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='<fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='Amazon ElastiCache',
    version='2015-02-02',
    servers=[
        {
            'description': 'The Amazon ElastiCache multi-region endpoint',
            'url': 'http://elasticache.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon ElastiCache multi-region endpoint',
            'url': 'https://elasticache.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon ElastiCache endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://elasticache.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The Amazon ElastiCache endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://elasticache.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.get(
    '/#Action=AddTagsToResource',
    description=""" <p>A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html">Resource-level permissions</a>.</p> <p> For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p> """,
    tags=['tag_management', 'security_group_management', 'cache_cluster_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__add_tags_to_resource(
    resource_name: str = Query(..., alias='ResourceName'),
    tags: Tags = Query(..., alias='Tags'),
    action: Action = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=AddTagsToResource',
    description=""" <p>A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html">Resource-level permissions</a>.</p> <p> For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p> """,
    tags=['security_group_management', 'user_management', 'service_update_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__add_tags_to_resource(
    action: Action = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=AuthorizeCacheSecurityGroupIngress',
    description=""" <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note> """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__authorize_cache_security_group_ingress(
    cache_security_group_name: str = Query(..., alias='CacheSecurityGroupName'),
    e_c2_security_group_name: str = Query(..., alias='EC2SecurityGroupName'),
    e_c2_security_group_owner_id: str = Query(..., alias='EC2SecurityGroupOwnerId'),
    action: Action4 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=AuthorizeCacheSecurityGroupIngress',
    description=""" <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note> """,
    tags=['security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__authorize_cache_security_group_ingress(
    action: Action4 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=BatchApplyUpdateAction',
    description=""" Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>. """,
    tags=[
        'replication_group_management',
        'service_update_management',
        'replication_group_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__batch_apply_update_action(
    replication_group_ids: Optional[ReplicationGroupIds] = Query(
        None, alias='ReplicationGroupIds'
    ),
    cache_cluster_ids: Optional[CacheClusterIds] = Query(None, alias='CacheClusterIds'),
    service_update_name: str = Query(..., alias='ServiceUpdateName'),
    action: Action8 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=BatchApplyUpdateAction',
    description=""" Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>. """,
    tags=['security_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__batch_apply_update_action(
    action: Action8 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=BatchStopUpdateAction',
    description=""" Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>. """,
    tags=[
        'service_update_management',
        'replication_group_management',
        'replication_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__batch_stop_update_action(
    replication_group_ids: Optional[ReplicationGroupIds] = Query(
        None, alias='ReplicationGroupIds'
    ),
    cache_cluster_ids: Optional[CacheClusterIds] = Query(None, alias='CacheClusterIds'),
    service_update_name: str = Query(..., alias='ServiceUpdateName'),
    action: Action12 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=BatchStopUpdateAction',
    description=""" Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>. """,
    tags=['security_group_management', 'user_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__batch_stop_update_action(
    action: Action12 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CompleteMigration',
    description=""" Complete the migration of data. """,
    tags=[
        'replication_group_operations',
        'replication_group_management',
        'replication_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__complete_migration(
    replication_group_id: str = Query(..., alias='ReplicationGroupId'),
    force: Optional[bool] = Query(None, alias='Force'),
    action: Action16 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CompleteMigration',
    description=""" Complete the migration of data. """,
    tags=['security_group_management', 'user_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__complete_migration(
    action: Action16 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CopySnapshot',
    description=""" <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul> """,
    tags=['snapshot_operations', 'snapshot_management', 'migration_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__copy_snapshot(
    source_snapshot_name: str = Query(..., alias='SourceSnapshotName'),
    target_snapshot_name: str = Query(..., alias='TargetSnapshotName'),
    target_bucket: Optional[str] = Query(None, alias='TargetBucket'),
    kms_key_id: Optional[str] = Query(None, alias='KmsKeyId'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action20 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CopySnapshot',
    description=""" <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul> """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__copy_snapshot(
    action: Action20 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateCacheCluster',
    description=""" <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p> """,
    tags=[
        'cache_cluster_operations',
        'replication_group_management',
        'snapshot_operations',
        'security_group_management',
        'security_group_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_cache_cluster(
    cache_cluster_id: str = Query(..., alias='CacheClusterId'),
    replication_group_id: Optional[str] = Query(None, alias='ReplicationGroupId'),
    a_z_mode: Optional[AZMode] = Query(None, alias='AZMode'),
    preferred_availability_zone: Optional[str] = Query(
        None, alias='PreferredAvailabilityZone'
    ),
    preferred_availability_zones: Optional[PreferredAvailabilityZones] = Query(
        None, alias='PreferredAvailabilityZones'
    ),
    num_cache_nodes: Optional[int] = Query(None, alias='NumCacheNodes'),
    cache_node_type: Optional[str] = Query(None, alias='CacheNodeType'),
    engine: Optional[str] = Query(None, alias='Engine'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    cache_parameter_group_name: Optional[str] = Query(
        None, alias='CacheParameterGroupName'
    ),
    cache_subnet_group_name: Optional[str] = Query(None, alias='CacheSubnetGroupName'),
    cache_security_group_names: Optional[CacheSecurityGroupNames] = Query(
        None, alias='CacheSecurityGroupNames'
    ),
    security_group_ids: Optional[SecurityGroupIds] = Query(
        None, alias='SecurityGroupIds'
    ),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    snapshot_arns: Optional[SnapshotArns] = Query(None, alias='SnapshotArns'),
    snapshot_name: Optional[str] = Query(None, alias='SnapshotName'),
    preferred_maintenance_window: Optional[str] = Query(
        None, alias='PreferredMaintenanceWindow'
    ),
    port: Optional[int] = Query(None, alias='Port'),
    notification_topic_arn: Optional[str] = Query(None, alias='NotificationTopicArn'),
    auto_minor_version_upgrade: Optional[bool] = Query(
        None, alias='AutoMinorVersionUpgrade'
    ),
    snapshot_retention_limit: Optional[int] = Query(
        None, alias='SnapshotRetentionLimit'
    ),
    snapshot_window: Optional[str] = Query(None, alias='SnapshotWindow'),
    auth_token: Optional[str] = Query(None, alias='AuthToken'),
    outpost_mode: Optional[OutpostMode] = Query(None, alias='OutpostMode'),
    preferred_outpost_arn: Optional[str] = Query(None, alias='PreferredOutpostArn'),
    preferred_outpost_arns: Optional[PreferredOutpostArns] = Query(
        None, alias='PreferredOutpostArns'
    ),
    log_delivery_configurations: Optional[LogDeliveryConfigurations] = Query(
        None, alias='LogDeliveryConfigurations'
    ),
    transit_encryption_enabled: Optional[bool] = Query(
        None, alias='TransitEncryptionEnabled'
    ),
    network_type: Optional[NetworkType] = Query(None, alias='NetworkType'),
    ip_discovery: Optional[IpDiscovery] = Query(None, alias='IpDiscovery'),
    action: Action24 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateCacheCluster',
    description=""" <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p> """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_cache_cluster(
    action: Action24 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateCacheParameterGroup',
    description=""" <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul> """,
    tags=['cache_parameter_management', 'parameter_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_cache_parameter_group(
    cache_parameter_group_name: str = Query(..., alias='CacheParameterGroupName'),
    cache_parameter_group_family: str = Query(..., alias='CacheParameterGroupFamily'),
    description: str = Query(..., alias='Description'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action28 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateCacheParameterGroup',
    description=""" <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul> """,
    tags=['user_management', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_cache_parameter_group(
    action: Action28 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateCacheSecurityGroup',
    description=""" <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p> """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_cache_security_group(
    cache_security_group_name: str = Query(..., alias='CacheSecurityGroupName'),
    description: str = Query(..., alias='Description'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action32 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateCacheSecurityGroup',
    description=""" <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p> """,
    tags=['user_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_cache_security_group(
    action: Action32 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateCacheSubnetGroup',
    description=""" <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> """,
    tags=['subnet_group_management', 'subnet_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_cache_subnet_group(
    cache_subnet_group_name: str = Query(..., alias='CacheSubnetGroupName'),
    cache_subnet_group_description: str = Query(
        ..., alias='CacheSubnetGroupDescription'
    ),
    subnet_ids: SubnetIds = Query(..., alias='SubnetIds'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action36 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateCacheSubnetGroup',
    description=""" <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> """,
    tags=['security_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_cache_subnet_group(
    action: Action36 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateGlobalReplicationGroup',
    description=""" <p>Global Datastore for Redis offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis, you can create cross-region read replica clusters for ElastiCache for Redis to enable low-latency reads and disaster recovery across regions. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html">Replication Across Regions Using Global Datastore</a>. </p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> is the name of the Global datastore.</p> </li> <li> <p>The <b>PrimaryReplicationGroupId</b> represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.</p> </li> </ul> """,
    tags=['global_replication_management', 'replication_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_global_replication_group(
    global_replication_group_id_suffix: str = Query(
        ..., alias='GlobalReplicationGroupIdSuffix'
    ),
    global_replication_group_description: Optional[str] = Query(
        None, alias='GlobalReplicationGroupDescription'
    ),
    primary_replication_group_id: str = Query(..., alias='PrimaryReplicationGroupId'),
    action: Action40 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateGlobalReplicationGroup',
    description=""" <p>Global Datastore for Redis offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis, you can create cross-region read replica clusters for ElastiCache for Redis to enable low-latency reads and disaster recovery across regions. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html">Replication Across Regions Using Global Datastore</a>. </p> <ul> <li> <p>The <b>GlobalReplicationGroupIdSuffix</b> is the name of the Global datastore.</p> </li> <li> <p>The <b>PrimaryReplicationGroupId</b> represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.</p> </li> </ul> """,
    tags=['security_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_global_replication_group(
    action: Action40 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateReplicationGroup',
    description=""" <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed. </p> <p>The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html">Creating a Subnet Group</a>. For versions below 5.0.6, the limit is 250 per cluster.</p> <p>To request a limit increase, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon Service Limits</a> and choose the limit type <b>Nodes per cluster per instance type</b>. </p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' scaling. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html">Scaling ElastiCache for Redis Clusters</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=[
        'replication_group_management',
        'replication_group_operations',
        'global_replication_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_replication_group(
    replication_group_id: str = Query(..., alias='ReplicationGroupId'),
    replication_group_description: str = Query(
        ..., alias='ReplicationGroupDescription'
    ),
    global_replication_group_id: Optional[str] = Query(
        None, alias='GlobalReplicationGroupId'
    ),
    primary_cluster_id: Optional[str] = Query(None, alias='PrimaryClusterId'),
    automatic_failover_enabled: Optional[bool] = Query(
        None, alias='AutomaticFailoverEnabled'
    ),
    multi_a_z_enabled: Optional[bool] = Query(None, alias='MultiAZEnabled'),
    num_cache_clusters: Optional[int] = Query(None, alias='NumCacheClusters'),
    preferred_cache_cluster_a_zs: Optional[PreferredCacheClusterAZs] = Query(
        None, alias='PreferredCacheClusterAZs'
    ),
    num_node_groups: Optional[int] = Query(None, alias='NumNodeGroups'),
    replicas_per_node_group: Optional[int] = Query(None, alias='ReplicasPerNodeGroup'),
    node_group_configuration: Optional[NodeGroupConfiguration1] = Query(
        None, alias='NodeGroupConfiguration'
    ),
    cache_node_type: Optional[str] = Query(None, alias='CacheNodeType'),
    engine: Optional[str] = Query(None, alias='Engine'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    cache_parameter_group_name: Optional[str] = Query(
        None, alias='CacheParameterGroupName'
    ),
    cache_subnet_group_name: Optional[str] = Query(None, alias='CacheSubnetGroupName'),
    cache_security_group_names: Optional[CacheSecurityGroupNames] = Query(
        None, alias='CacheSecurityGroupNames'
    ),
    security_group_ids: Optional[SecurityGroupIds] = Query(
        None, alias='SecurityGroupIds'
    ),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    snapshot_arns: Optional[SnapshotArns] = Query(None, alias='SnapshotArns'),
    snapshot_name: Optional[str] = Query(None, alias='SnapshotName'),
    preferred_maintenance_window: Optional[str] = Query(
        None, alias='PreferredMaintenanceWindow'
    ),
    port: Optional[int] = Query(None, alias='Port'),
    notification_topic_arn: Optional[str] = Query(None, alias='NotificationTopicArn'),
    auto_minor_version_upgrade: Optional[bool] = Query(
        None, alias='AutoMinorVersionUpgrade'
    ),
    snapshot_retention_limit: Optional[int] = Query(
        None, alias='SnapshotRetentionLimit'
    ),
    snapshot_window: Optional[str] = Query(None, alias='SnapshotWindow'),
    auth_token: Optional[str] = Query(None, alias='AuthToken'),
    transit_encryption_enabled: Optional[bool] = Query(
        None, alias='TransitEncryptionEnabled'
    ),
    at_rest_encryption_enabled: Optional[bool] = Query(
        None, alias='AtRestEncryptionEnabled'
    ),
    kms_key_id: Optional[str] = Query(None, alias='KmsKeyId'),
    user_group_ids: Optional[UserGroupIds] = Query(None, alias='UserGroupIds'),
    log_delivery_configurations: Optional[LogDeliveryConfigurations] = Query(
        None, alias='LogDeliveryConfigurations'
    ),
    data_tiering_enabled: Optional[bool] = Query(None, alias='DataTieringEnabled'),
    network_type: Optional[NetworkType] = Query(None, alias='NetworkType'),
    ip_discovery: Optional[IpDiscovery] = Query(None, alias='IpDiscovery'),
    transit_encryption_mode: Optional[TransitEncryptionMode] = Query(
        None, alias='TransitEncryptionMode'
    ),
    action: Action44 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateReplicationGroup',
    description=""" <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed. </p> <p>The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html">Creating a Subnet Group</a>. For versions below 5.0.6, the limit is 250 per cluster.</p> <p>To request a limit increase, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">Amazon Service Limits</a> and choose the limit type <b>Nodes per cluster per instance type</b>. </p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' scaling. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html">Scaling ElastiCache for Redis Clusters</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=['security_group_management', 'user_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_replication_group(
    action: Action44 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateSnapshot',
    description=""" <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=['snapshot_operations', 'replication_group_management', 'tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_snapshot(
    replication_group_id: Optional[str] = Query(None, alias='ReplicationGroupId'),
    cache_cluster_id: Optional[str] = Query(None, alias='CacheClusterId'),
    snapshot_name: str = Query(..., alias='SnapshotName'),
    kms_key_id: Optional[str] = Query(None, alias='KmsKeyId'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action48 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateSnapshot',
    description=""" <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_snapshot(
    action: Action48 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateUser',
    description=""" For Redis engine version 6.0 onwards: Creates a Redis user. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>. """,
    tags=['user_management', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_user(
    user_id: constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-]*', min_length=1) = Query(
        ..., alias='UserId'
    ),
    user_name: constr(min_length=1) = Query(..., alias='UserName'),
    engine: constr(pattern=r'[a-zA-Z]*') = Query(..., alias='Engine'),
    passwords: Optional[Passwords] = Query(None, alias='Passwords'),
    access_string: constr(pattern=r'.*\S.*') = Query(..., alias='AccessString'),
    no_password_required: Optional[bool] = Query(None, alias='NoPasswordRequired'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    authentication_mode: Optional[AuthenticationMode] = Query(
        None, alias='AuthenticationMode'
    ),
    action: Action52 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateUser',
    description=""" For Redis engine version 6.0 onwards: Creates a Redis user. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>. """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_user(
    action: Action52 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateUserGroup',
    description=""" For Redis engine version 6.0 onwards: Creates a Redis user group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>  """,
    tags=['user_management', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_user_group(
    user_group_id: str = Query(..., alias='UserGroupId'),
    engine: constr(pattern=r'[a-zA-Z]*') = Query(..., alias='Engine'),
    user_ids: Optional[UserIds] = Query(None, alias='UserIds'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action56 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateUserGroup',
    description=""" For Redis engine version 6.0 onwards: Creates a Redis user group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>  """,
    tags=['security_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_user_group(
    action: Action56 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DecreaseNodeGroupsInGlobalReplicationGroup',
    description=""" Decreases the number of node groups in a Global datastore """,
    tags=['global_replication_management', 'replication_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__decrease_node_groups_in_global_replication_group(
    global_replication_group_id: str = Query(..., alias='GlobalReplicationGroupId'),
    node_group_count: int = Query(..., alias='NodeGroupCount'),
    global_node_groups_to_remove: Optional[GlobalNodeGroupsToRemove] = Query(
        None, alias='GlobalNodeGroupsToRemove'
    ),
    global_node_groups_to_retain: Optional[GlobalNodeGroupsToRetain] = Query(
        None, alias='GlobalNodeGroupsToRetain'
    ),
    apply_immediately: bool = Query(..., alias='ApplyImmediately'),
    action: Action60 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DecreaseNodeGroupsInGlobalReplicationGroup',
    description=""" Decreases the number of node groups in a Global datastore """,
    tags=['migration_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__decrease_node_groups_in_global_replication_group(
    action: Action60 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DecreaseReplicaCount',
    description=""" Dynamically decreases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time. """,
    tags=[
        'replication_group_operations',
        'replication_group_management',
        'replication_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__decrease_replica_count(
    replication_group_id: str = Query(..., alias='ReplicationGroupId'),
    new_replica_count: Optional[int] = Query(None, alias='NewReplicaCount'),
    replica_configuration: Optional[ReplicaConfiguration] = Query(
        None, alias='ReplicaConfiguration'
    ),
    replicas_to_remove: Optional[ReplicasToRemove] = Query(
        None, alias='ReplicasToRemove'
    ),
    apply_immediately: bool = Query(..., alias='ApplyImmediately'),
    action: Action64 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DecreaseReplicaCount',
    description=""" Dynamically decreases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time. """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__decrease_replica_count(
    action: Action64 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteCacheCluster',
    description=""" <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>Redis (cluster mode disabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A cluster that is the primary node of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul> """,
    tags=['cache_cluster_operations', 'snapshot_operations', 'cluster_modifications'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_cache_cluster(
    cache_cluster_id: str = Query(..., alias='CacheClusterId'),
    final_snapshot_identifier: Optional[str] = Query(
        None, alias='FinalSnapshotIdentifier'
    ),
    action: Action68 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteCacheCluster',
    description=""" <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>Redis (cluster mode disabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A cluster that is the primary node of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul> """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_cache_cluster(
    action: Action68 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteCacheParameterGroup',
    description=""" Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account. """,
    tags=['cache_parameter_management', 'parameter_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_cache_parameter_group(
    cache_parameter_group_name: str = Query(..., alias='CacheParameterGroupName'),
    action: Action72 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteCacheParameterGroup',
    description=""" Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account. """,
    tags=['security_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_cache_parameter_group(
    action: Action72 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteCacheSecurityGroup',
    description=""" <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note> """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_cache_security_group(
    cache_security_group_name: str = Query(..., alias='CacheSecurityGroupName'),
    action: Action76 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteCacheSecurityGroup',
    description=""" <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note> """,
    tags=['security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_cache_security_group(
    action: Action76 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteCacheSubnetGroup',
    description=""" <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a default cache subnet group or one that is associated with any clusters.</p> </note> """,
    tags=['subnet_group_management', 'subnet_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_cache_subnet_group(
    cache_subnet_group_name: str = Query(..., alias='CacheSubnetGroupName'),
    action: Action80 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteCacheSubnetGroup',
    description=""" <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a default cache subnet group or one that is associated with any clusters.</p> </note> """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_cache_subnet_group(
    action: Action80 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteGlobalReplicationGroup',
    description=""" <p>Deleting a Global datastore is a two-step process: </p> <ul> <li> <p>First, you must <a>DisassociateGlobalReplicationGroup</a> to remove the secondary clusters in the Global datastore.</p> </li> <li> <p>Once the Global datastore contains only the primary cluster, you can use the <code>DeleteGlobalReplicationGroup</code> API to delete the Global datastore while retainining the primary cluster using <code>RetainPrimaryReplicationGroup=true</code>.</p> </li> </ul> <p>Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting <code>RetainPrimaryReplicationGroup=true</code>. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> """,
    tags=[
        'global_replication_management',
        'replication_group_management',
        'replication_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_global_replication_group(
    global_replication_group_id: str = Query(..., alias='GlobalReplicationGroupId'),
    retain_primary_replication_group: bool = Query(
        ..., alias='RetainPrimaryReplicationGroup'
    ),
    action: Action84 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteGlobalReplicationGroup',
    description=""" <p>Deleting a Global datastore is a two-step process: </p> <ul> <li> <p>First, you must <a>DisassociateGlobalReplicationGroup</a> to remove the secondary clusters in the Global datastore.</p> </li> <li> <p>Once the Global datastore contains only the primary cluster, you can use the <code>DeleteGlobalReplicationGroup</code> API to delete the Global datastore while retainining the primary cluster using <code>RetainPrimaryReplicationGroup=true</code>.</p> </li> </ul> <p>Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting <code>RetainPrimaryReplicationGroup=true</code>. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> """,
    tags=['security_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_global_replication_group(
    action: Action84 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteReplicationGroup',
    description=""" <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=[
        'replication_group_operations',
        'replication_group_management',
        'replication_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_replication_group(
    replication_group_id: str = Query(..., alias='ReplicationGroupId'),
    retain_primary_cluster: Optional[bool] = Query(None, alias='RetainPrimaryCluster'),
    final_snapshot_identifier: Optional[str] = Query(
        None, alias='FinalSnapshotIdentifier'
    ),
    action: Action88 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteReplicationGroup',
    description=""" <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=['security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_replication_group(
    action: Action88 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteSnapshot',
    description=""" <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=['snapshot_operations', 'snapshot_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_snapshot(
    snapshot_name: str = Query(..., alias='SnapshotName'),
    action: Action92 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteSnapshot',
    description=""" <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=['user_management', 'event_management', 'security_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_snapshot(
    action: Action92 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteUser',
    description=""" For Redis engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>.  """,
    tags=['user_management', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_user(
    user_id: constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-]*', min_length=1) = Query(
        ..., alias='UserId'
    ),
    action: Action96 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteUser',
    description=""" For Redis engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>.  """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_user(
    action: Action96 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteUserGroup',
    description=""" For Redis engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>.  """,
    tags=['user_management', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_user_group(
    user_group_id: str = Query(..., alias='UserGroupId'),
    action: Action100 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteUserGroup',
    description=""" For Redis engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html">Using Role Based Access Control (RBAC)</a>.  """,
    tags=['security_group_management', 'event_management', 'service_update_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_user_group(
    action: Action100 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeCacheClusters',
    description=""" <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p> """,
    tags=['cache_cluster_operations', 'cache_parameter_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_cache_clusters(
    cache_cluster_id: Optional[str] = Query(None, alias='CacheClusterId'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    show_cache_node_info: Optional[bool] = Query(None, alias='ShowCacheNodeInfo'),
    show_cache_clusters_not_in_replication_groups: Optional[bool] = Query(
        None, alias='ShowCacheClustersNotInReplicationGroups'
    ),
    action: Action104 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeCacheClusters',
    description=""" <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p> """,
    tags=['migration_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_cache_clusters(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action104 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeCacheEngineVersions',
    description=""" Returns a list of the available cache engines and their versions. """,
    tags=[
        'cache_parameter_management',
        'engine_version_management',
        'default_parameter_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_cache_engine_versions(
    engine: Optional[str] = Query(None, alias='Engine'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    cache_parameter_group_family: Optional[str] = Query(
        None, alias='CacheParameterGroupFamily'
    ),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    default_only: Optional[bool] = Query(None, alias='DefaultOnly'),
    action: Action108 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeCacheEngineVersions',
    description=""" Returns a list of the available cache engines and their versions. """,
    tags=['snapshot_operations', 'migration_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_cache_engine_versions(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action108 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeCacheParameterGroups',
    description=""" Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group. """,
    tags=['cache_parameter_management', 'parameter_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_cache_parameter_groups(
    cache_parameter_group_name: Optional[str] = Query(
        None, alias='CacheParameterGroupName'
    ),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action112 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeCacheParameterGroups',
    description=""" Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group. """,
    tags=['migration_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_cache_parameter_groups(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action112 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeCacheParameters',
    description=""" Returns the detailed parameter list for a particular cache parameter group. """,
    tags=['cache_parameter_management', 'parameter_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_cache_parameters(
    cache_parameter_group_name: str = Query(..., alias='CacheParameterGroupName'),
    source: Optional[str] = Query(None, alias='Source'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action116 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeCacheParameters',
    description=""" Returns the detailed parameter list for a particular cache parameter group. """,
    tags=['security_group_management', 'user_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_cache_parameters(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action116 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeCacheSecurityGroups',
    description=""" Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup  """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_cache_security_groups(
    cache_security_group_name: Optional[str] = Query(
        None, alias='CacheSecurityGroupName'
    ),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action120 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeCacheSecurityGroups',
    description=""" Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup  """,
    tags=['migration_handling', 'service_update_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_cache_security_groups(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action120 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeCacheSubnetGroups',
    description=""" Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default.  """,
    tags=['subnet_group_management', 'subnet_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_cache_subnet_groups(
    cache_subnet_group_name: Optional[str] = Query(None, alias='CacheSubnetGroupName'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action124 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeCacheSubnetGroups',
    description=""" Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default.  """,
    tags=['security_group_management', 'replication_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_cache_subnet_groups(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action124 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeEngineDefaultParameters',
    description=""" Returns the default engine and system parameter information for the specified cache engine. """,
    tags=['cache_parameter_management', 'parameter_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_engine_default_parameters(
    cache_parameter_group_family: str = Query(..., alias='CacheParameterGroupFamily'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action128 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeEngineDefaultParameters',
    description=""" Returns the default engine and system parameter information for the specified cache engine. """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_engine_default_parameters(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action128 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeEvents',
    description=""" <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p> """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_events(
    source_identifier: Optional[str] = Query(None, alias='SourceIdentifier'),
    source_type: Optional[SourceType] = Query(None, alias='SourceType'),
    start_time: Optional[datetime] = Query(None, alias='StartTime'),
    end_time: Optional[datetime] = Query(None, alias='EndTime'),
    duration: Optional[int] = Query(None, alias='Duration'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action132 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeEvents',
    description=""" <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p> """,
    tags=[
        'security_group_management',
        'cache_cluster_operations',
        'replication_group_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_events(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action132 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeGlobalReplicationGroups',
    description=""" Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores.  """,
    tags=['global_replication_management', 'replication_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_global_replication_groups(
    global_replication_group_id: Optional[str] = Query(
        None, alias='GlobalReplicationGroupId'
    ),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    show_member_info: Optional[bool] = Query(None, alias='ShowMemberInfo'),
    action: Action136 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeGlobalReplicationGroups',
    description=""" Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores.  """,
    tags=['tag_management', 'user_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_global_replication_groups(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action136 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeReplicationGroups',
    description=""" <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=['replication_group_operations', 'replication_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_replication_groups(
    replication_group_id: Optional[str] = Query(None, alias='ReplicationGroupId'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action140 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeReplicationGroups',
    description=""" <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=['snapshot_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_replication_groups(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action140 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeReservedCacheNodes',
    description=""" Returns information about reserved cache nodes for this account, or about a specified reserved cache node. """,
    tags=['reserved_node_operations', 'reserved_node_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_reserved_cache_nodes(
    reserved_cache_node_id: Optional[str] = Query(None, alias='ReservedCacheNodeId'),
    reserved_cache_nodes_offering_id: Optional[str] = Query(
        None, alias='ReservedCacheNodesOfferingId'
    ),
    cache_node_type: Optional[str] = Query(None, alias='CacheNodeType'),
    duration: Optional[str] = Query(None, alias='Duration'),
    product_description: Optional[str] = Query(None, alias='ProductDescription'),
    offering_type: Optional[str] = Query(None, alias='OfferingType'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action144 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeReservedCacheNodes',
    description=""" Returns information about reserved cache nodes for this account, or about a specified reserved cache node. """,
    tags=['security_group_management', 'user_management', 'cache_parameter_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_reserved_cache_nodes(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action144 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeReservedCacheNodesOfferings',
    description=""" Lists available reserved cache node offerings. """,
    tags=['reserved_node_management', 'reserved_node_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_reserved_cache_nodes_offerings(
    reserved_cache_nodes_offering_id: Optional[str] = Query(
        None, alias='ReservedCacheNodesOfferingId'
    ),
    cache_node_type: Optional[str] = Query(None, alias='CacheNodeType'),
    duration: Optional[str] = Query(None, alias='Duration'),
    product_description: Optional[str] = Query(None, alias='ProductDescription'),
    offering_type: Optional[str] = Query(None, alias='OfferingType'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action148 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeReservedCacheNodesOfferings',
    description=""" Lists available reserved cache node offerings. """,
    tags=[
        'tag_management',
        'security_group_management',
        'cache_cluster_operations',
        'migration_handling',
        'snapshot_operations',
        'replication_group_operations',
        'user_management',
        'cache_parameter_management',
        'subnet_group_management',
        'global_replication_management',
        'parameter_group_management',
        'engine_version_management',
        'security_group_operations',
        'subnet_group_operations',
        'default_parameter_operations',
        'event_management',
        'reserved_node_operations',
        'service_update_management',
        'snapshot_management',
        'user_operations_management',
        'cluster_modifications',
        'reserved_node_management',
        'replication_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_reserved_cache_nodes_offerings(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action148 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeServiceUpdates',
    description=""" Returns details of the service updates """,
    tags=['service_update_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_service_updates(
    service_update_name: Optional[str] = Query(None, alias='ServiceUpdateName'),
    service_update_status: Optional[ServiceUpdateStatus1] = Query(
        None, alias='ServiceUpdateStatus'
    ),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action152 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeServiceUpdates',
    description=""" Returns details of the service updates """,
    tags=['migration_handling', 'replication_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_service_updates(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action152 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeSnapshots',
    description=""" <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=[
        'snapshot_operations',
        'replication_group_operations',
        'cache_cluster_operations',
        'snapshot_management',
        'replication_group_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_snapshots(
    replication_group_id: Optional[str] = Query(None, alias='ReplicationGroupId'),
    cache_cluster_id: Optional[str] = Query(None, alias='CacheClusterId'),
    snapshot_name: Optional[str] = Query(None, alias='SnapshotName'),
    snapshot_source: Optional[str] = Query(None, alias='SnapshotSource'),
    marker: Optional[str] = Query(None, alias='Marker'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    show_node_group_config: Optional[bool] = Query(None, alias='ShowNodeGroupConfig'),
    action: Action156 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeSnapshots',
    description=""" <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=[
        'security_group_management',
        'replication_group_management',
        'cache_cluster_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_snapshots(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action156 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeUpdateActions',
    description=""" Returns details of the update actions  """,
    tags=['service_update_management', 'replication_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_update_actions(
    service_update_name: Optional[str] = Query(None, alias='ServiceUpdateName'),
    replication_group_ids: Optional[ReplicationGroupIds] = Query(
        None, alias='ReplicationGroupIds'
    ),
    cache_cluster_ids: Optional[CacheClusterIds] = Query(None, alias='CacheClusterIds'),
    engine: Optional[str] = Query(None, alias='Engine'),
    service_update_status: Optional[ServiceUpdateStatus1] = Query(
        None, alias='ServiceUpdateStatus'
    ),
    service_update_time_range: Optional[ServiceUpdateTimeRange] = Query(
        None, alias='ServiceUpdateTimeRange'
    ),
    update_action_status: Optional[UpdateActionStatus1] = Query(
        None, alias='UpdateActionStatus'
    ),
    show_node_level_update_status: Optional[bool] = Query(
        None, alias='ShowNodeLevelUpdateStatus'
    ),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action160 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeUpdateActions',
    description=""" Returns details of the update actions  """,
    tags=['migration_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_update_actions(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action160 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeUserGroups',
    description=""" Returns a list of user groups. """,
    tags=['user_management', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_user_groups(
    user_group_id: Optional[str] = Query(None, alias='UserGroupId'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action164 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeUserGroups',
    description=""" Returns a list of user groups. """,
    tags=['security_group_management', 'user_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_user_groups(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action164 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeUsers',
    description=""" Returns a list of users. """,
    tags=['user_management', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_users(
    engine: Optional[constr(pattern=r'[a-zA-Z]*')] = Query(None, alias='Engine'),
    user_id: Optional[constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-]*', min_length=1)] = Query(
        None, alias='UserId'
    ),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action168 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeUsers',
    description=""" Returns a list of users. """,
    tags=['security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_users(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action168 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DisassociateGlobalReplicationGroup',
    description=""" Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region. """,
    tags=[
        'global_replication_management',
        'replication_group_operations',
        'replication_group_management',
        'replication_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__disassociate_global_replication_group(
    global_replication_group_id: str = Query(..., alias='GlobalReplicationGroupId'),
    replication_group_id: str = Query(..., alias='ReplicationGroupId'),
    replication_group_region: str = Query(..., alias='ReplicationGroupRegion'),
    action: Action172 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DisassociateGlobalReplicationGroup',
    description=""" Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region. """,
    tags=['security_group_management', 'user_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__disassociate_global_replication_group(
    action: Action172 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=FailoverGlobalReplicationGroup',
    description=""" Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary. """,
    tags=['global_replication_management', 'replication_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__failover_global_replication_group(
    global_replication_group_id: str = Query(..., alias='GlobalReplicationGroupId'),
    primary_region: str = Query(..., alias='PrimaryRegion'),
    primary_replication_group_id: str = Query(..., alias='PrimaryReplicationGroupId'),
    action: Action176 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=FailoverGlobalReplicationGroup',
    description=""" Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary. """,
    tags=['security_group_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__failover_global_replication_group(
    action: Action176 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=IncreaseNodeGroupsInGlobalReplicationGroup',
    description=""" Increase the number of node groups in the Global datastore """,
    tags=['global_replication_management', 'replication_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__increase_node_groups_in_global_replication_group(
    global_replication_group_id: str = Query(..., alias='GlobalReplicationGroupId'),
    node_group_count: int = Query(..., alias='NodeGroupCount'),
    regional_configurations: Optional[RegionalConfigurations] = Query(
        None, alias='RegionalConfigurations'
    ),
    apply_immediately: bool = Query(..., alias='ApplyImmediately'),
    action: Action180 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=IncreaseNodeGroupsInGlobalReplicationGroup',
    description=""" Increase the number of node groups in the Global datastore """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__increase_node_groups_in_global_replication_group(
    action: Action180 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=IncreaseReplicaCount',
    description=""" Dynamically increases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time. """,
    tags=[
        'replication_group_operations',
        'replication_group_management',
        'replication_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__increase_replica_count(
    replication_group_id: str = Query(..., alias='ReplicationGroupId'),
    new_replica_count: Optional[int] = Query(None, alias='NewReplicaCount'),
    replica_configuration: Optional[ReplicaConfiguration] = Query(
        None, alias='ReplicaConfiguration'
    ),
    apply_immediately: bool = Query(..., alias='ApplyImmediately'),
    action: Action184 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=IncreaseReplicaCount',
    description=""" Dynamically increases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time. """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__increase_replica_count(
    action: Action184 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ListAllowedNodeTypeModifications',
    description=""" <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p> """,
    tags=['cache_cluster_operations', 'replication_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__list_allowed_node_type_modifications(
    cache_cluster_id: Optional[str] = Query(None, alias='CacheClusterId'),
    replication_group_id: Optional[str] = Query(None, alias='ReplicationGroupId'),
    action: Action188 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ListAllowedNodeTypeModifications',
    description=""" <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p> """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__list_allowed_node_type_modifications(
    action: Action188 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ListTagsForResource',
    description=""" <p>Lists all tags currently on a named resource.</p> <p> A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html">Resource-level permissions</a>.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> """,
    tags=['user_management', 'security_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__list_tags_for_resource(
    resource_name: str = Query(..., alias='ResourceName'),
    action: Action192 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ListTagsForResource',
    description=""" <p>Lists all tags currently on a named resource.</p> <p> A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html">Resource-level permissions</a>.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> """,
    tags=['security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__list_tags_for_resource(
    action: Action192 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyCacheCluster',
    description=""" Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values. """,
    tags=[
        'cache_cluster_operations',
        'security_group_management',
        'cache_parameter_management',
        'engine_version_management',
        'snapshot_operations',
        'cluster_modifications',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_cache_cluster(
    cache_cluster_id: str = Query(..., alias='CacheClusterId'),
    num_cache_nodes: Optional[int] = Query(None, alias='NumCacheNodes'),
    cache_node_ids_to_remove: Optional[CacheNodeIdsToRemove] = Query(
        None, alias='CacheNodeIdsToRemove'
    ),
    a_z_mode: Optional[AZMode] = Query(None, alias='AZMode'),
    new_availability_zones: Optional[NewAvailabilityZones] = Query(
        None, alias='NewAvailabilityZones'
    ),
    cache_security_group_names: Optional[CacheSecurityGroupNames] = Query(
        None, alias='CacheSecurityGroupNames'
    ),
    security_group_ids: Optional[SecurityGroupIds] = Query(
        None, alias='SecurityGroupIds'
    ),
    preferred_maintenance_window: Optional[str] = Query(
        None, alias='PreferredMaintenanceWindow'
    ),
    notification_topic_arn: Optional[str] = Query(None, alias='NotificationTopicArn'),
    cache_parameter_group_name: Optional[str] = Query(
        None, alias='CacheParameterGroupName'
    ),
    notification_topic_status: Optional[str] = Query(
        None, alias='NotificationTopicStatus'
    ),
    apply_immediately: Optional[bool] = Query(None, alias='ApplyImmediately'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    auto_minor_version_upgrade: Optional[bool] = Query(
        None, alias='AutoMinorVersionUpgrade'
    ),
    snapshot_retention_limit: Optional[int] = Query(
        None, alias='SnapshotRetentionLimit'
    ),
    snapshot_window: Optional[str] = Query(None, alias='SnapshotWindow'),
    cache_node_type: Optional[str] = Query(None, alias='CacheNodeType'),
    auth_token: Optional[str] = Query(None, alias='AuthToken'),
    auth_token_update_strategy: Optional[AuthTokenUpdateStrategy] = Query(
        None, alias='AuthTokenUpdateStrategy'
    ),
    log_delivery_configurations: Optional[LogDeliveryConfigurations] = Query(
        None, alias='LogDeliveryConfigurations'
    ),
    ip_discovery: Optional[IpDiscovery] = Query(None, alias='IpDiscovery'),
    action: Action196 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyCacheCluster',
    description=""" Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values. """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_cache_cluster(
    action: Action196 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyCacheParameterGroup',
    description=""" Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs. """,
    tags=['cache_parameter_management', 'parameter_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_cache_parameter_group(
    cache_parameter_group_name: str = Query(..., alias='CacheParameterGroupName'),
    parameter_name_values: ParameterNameValues = Query(
        ..., alias='ParameterNameValues'
    ),
    action: Action200 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyCacheParameterGroup',
    description=""" Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs. """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_cache_parameter_group(
    action: Action200 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyCacheSubnetGroup',
    description=""" Modifies an existing cache subnet group. """,
    tags=['subnet_group_management', 'subnet_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_cache_subnet_group(
    cache_subnet_group_name: str = Query(..., alias='CacheSubnetGroupName'),
    cache_subnet_group_description: Optional[str] = Query(
        None, alias='CacheSubnetGroupDescription'
    ),
    subnet_ids: Optional[SubnetIds] = Query(None, alias='SubnetIds'),
    action: Action204 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyCacheSubnetGroup',
    description=""" Modifies an existing cache subnet group. """,
    tags=['security_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_cache_subnet_group(
    action: Action204 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyGlobalReplicationGroup',
    description=""" Modifies the settings for a Global datastore. """,
    tags=[
        'global_replication_management',
        'replication_group_management',
        'replication_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_global_replication_group(
    global_replication_group_id: str = Query(..., alias='GlobalReplicationGroupId'),
    apply_immediately: bool = Query(..., alias='ApplyImmediately'),
    cache_node_type: Optional[str] = Query(None, alias='CacheNodeType'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    cache_parameter_group_name: Optional[str] = Query(
        None, alias='CacheParameterGroupName'
    ),
    global_replication_group_description: Optional[str] = Query(
        None, alias='GlobalReplicationGroupDescription'
    ),
    automatic_failover_enabled: Optional[bool] = Query(
        None, alias='AutomaticFailoverEnabled'
    ),
    action: Action208 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyGlobalReplicationGroup',
    description=""" Modifies the settings for a Global datastore. """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_global_replication_group(
    action: Action208 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyReplicationGroup',
    description=""" <p>Modifies the settings for a replication group.</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=[
        'replication_group_management',
        'replication_group_operations',
        'cache_cluster_operations',
        'user_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_replication_group(
    replication_group_id: str = Query(..., alias='ReplicationGroupId'),
    replication_group_description: Optional[str] = Query(
        None, alias='ReplicationGroupDescription'
    ),
    primary_cluster_id: Optional[str] = Query(None, alias='PrimaryClusterId'),
    snapshotting_cluster_id: Optional[str] = Query(None, alias='SnapshottingClusterId'),
    automatic_failover_enabled: Optional[bool] = Query(
        None, alias='AutomaticFailoverEnabled'
    ),
    multi_a_z_enabled: Optional[bool] = Query(None, alias='MultiAZEnabled'),
    node_group_id: Optional[str] = Query(None, alias='NodeGroupId'),
    cache_security_group_names: Optional[CacheSecurityGroupNames] = Query(
        None, alias='CacheSecurityGroupNames'
    ),
    security_group_ids: Optional[SecurityGroupIds] = Query(
        None, alias='SecurityGroupIds'
    ),
    preferred_maintenance_window: Optional[str] = Query(
        None, alias='PreferredMaintenanceWindow'
    ),
    notification_topic_arn: Optional[str] = Query(None, alias='NotificationTopicArn'),
    cache_parameter_group_name: Optional[str] = Query(
        None, alias='CacheParameterGroupName'
    ),
    notification_topic_status: Optional[str] = Query(
        None, alias='NotificationTopicStatus'
    ),
    apply_immediately: Optional[bool] = Query(None, alias='ApplyImmediately'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    auto_minor_version_upgrade: Optional[bool] = Query(
        None, alias='AutoMinorVersionUpgrade'
    ),
    snapshot_retention_limit: Optional[int] = Query(
        None, alias='SnapshotRetentionLimit'
    ),
    snapshot_window: Optional[str] = Query(None, alias='SnapshotWindow'),
    cache_node_type: Optional[str] = Query(None, alias='CacheNodeType'),
    auth_token: Optional[str] = Query(None, alias='AuthToken'),
    auth_token_update_strategy: Optional[AuthTokenUpdateStrategy] = Query(
        None, alias='AuthTokenUpdateStrategy'
    ),
    user_group_ids_to_add: Optional[UserGroupIdsToAdd] = Query(
        None, alias='UserGroupIdsToAdd'
    ),
    user_group_ids_to_remove: Optional[UserGroupIdsToRemove] = Query(
        None, alias='UserGroupIdsToRemove'
    ),
    remove_user_groups: Optional[bool] = Query(None, alias='RemoveUserGroups'),
    log_delivery_configurations: Optional[LogDeliveryConfigurations] = Query(
        None, alias='LogDeliveryConfigurations'
    ),
    ip_discovery: Optional[IpDiscovery] = Query(None, alias='IpDiscovery'),
    transit_encryption_enabled: Optional[bool] = Query(
        None, alias='TransitEncryptionEnabled'
    ),
    transit_encryption_mode: Optional[TransitEncryptionMode] = Query(
        None, alias='TransitEncryptionMode'
    ),
    action: Action212 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyReplicationGroup',
    description=""" <p>Modifies the settings for a replication group.</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note> """,
    tags=['security_group_management', 'user_management', 'service_update_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_replication_group(
    action: Action212 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyReplicationGroupShardConfiguration',
    description=""" Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards. """,
    tags=[
        'replication_group_operations',
        'replication_group_management',
        'replication_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_replication_group_shard_configuration(
    replication_group_id: str = Query(..., alias='ReplicationGroupId'),
    node_group_count: int = Query(..., alias='NodeGroupCount'),
    apply_immediately: bool = Query(..., alias='ApplyImmediately'),
    resharding_configuration: Optional[ReshardingConfiguration1] = Query(
        None, alias='ReshardingConfiguration'
    ),
    node_groups_to_remove: Optional[NodeGroupsToRemove] = Query(
        None, alias='NodeGroupsToRemove'
    ),
    node_groups_to_retain: Optional[NodeGroupsToRetain] = Query(
        None, alias='NodeGroupsToRetain'
    ),
    action: Action216 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyReplicationGroupShardConfiguration',
    description=""" Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards. """,
    tags=['migration_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_replication_group_shard_configuration(
    action: Action216 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyUser',
    description=""" Changes user password(s) and/or access string. """,
    tags=['user_management', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_user(
    user_id: constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-]*', min_length=1) = Query(
        ..., alias='UserId'
    ),
    access_string: Optional[constr(pattern=r'.*\S.*')] = Query(
        None, alias='AccessString'
    ),
    append_access_string: Optional[constr(pattern=r'.*\S.*')] = Query(
        None, alias='AppendAccessString'
    ),
    passwords: Optional[Passwords] = Query(None, alias='Passwords'),
    no_password_required: Optional[bool] = Query(None, alias='NoPasswordRequired'),
    authentication_mode: Optional[AuthenticationMode] = Query(
        None, alias='AuthenticationMode'
    ),
    action: Action220 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyUser',
    description=""" Changes user password(s) and/or access string. """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_user(
    action: Action220 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyUserGroup',
    description=""" Changes the list of users that belong to the user group. """,
    tags=['user_management', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_user_group(
    user_group_id: str = Query(..., alias='UserGroupId'),
    user_ids_to_add: Optional[UserIdsToAdd] = Query(None, alias='UserIdsToAdd'),
    user_ids_to_remove: Optional[UserIdsToRemove] = Query(
        None, alias='UserIdsToRemove'
    ),
    action: Action224 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyUserGroup',
    description=""" Changes the list of users that belong to the user group. """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_user_group(
    action: Action224 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=PurchaseReservedCacheNodesOffering',
    description=""" Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html">Managing Costs with Reserved Nodes</a> for Redis or <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html">Managing Costs with Reserved Nodes</a> for Memcached. """,
    tags=[
        'reserved_node_operations',
        'reserved_node_management',
        'cache_cluster_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__purchase_reserved_cache_nodes_offering(
    reserved_cache_nodes_offering_id: str = Query(
        ..., alias='ReservedCacheNodesOfferingId'
    ),
    reserved_cache_node_id: Optional[str] = Query(None, alias='ReservedCacheNodeId'),
    cache_node_count: Optional[int] = Query(None, alias='CacheNodeCount'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action228 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=PurchaseReservedCacheNodesOffering',
    description=""" Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html">Managing Costs with Reserved Nodes</a> for Redis or <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html">Managing Costs with Reserved Nodes</a> for Memcached. """,
    tags=['security_group_management', 'user_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__purchase_reserved_cache_nodes_offering(
    action: Action228 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=RebalanceSlotsInGlobalReplicationGroup',
    description=""" Redistribute slots to ensure uniform distribution across existing shards in the cluster. """,
    tags=['global_replication_management', 'replication_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__rebalance_slots_in_global_replication_group(
    global_replication_group_id: str = Query(..., alias='GlobalReplicationGroupId'),
    apply_immediately: bool = Query(..., alias='ApplyImmediately'),
    action: Action232 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=RebalanceSlotsInGlobalReplicationGroup',
    description=""" Redistribute slots to ensure uniform distribution across existing shards in the cluster. """,
    tags=['security_group_operations', 'default_parameter_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__rebalance_slots_in_global_replication_group(
    action: Action232 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=RebootCacheCluster',
    description=""" <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes.rebooting.html">Rebooting a Cluster</a> for an alternate process.</p> """,
    tags=['cache_cluster_operations', 'cluster_modifications'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__reboot_cache_cluster(
    cache_cluster_id: str = Query(..., alias='CacheClusterId'),
    cache_node_ids_to_reboot: CacheNodeIdsToReboot = Query(
        ..., alias='CacheNodeIdsToReboot'
    ),
    action: Action236 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=RebootCacheCluster',
    description=""" <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes.rebooting.html">Rebooting a Cluster</a> for an alternate process.</p> """,
    tags=['security_group_management', 'user_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__reboot_cache_cluster(
    action: Action236 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=RemoveTagsFromResource',
    description=""" Removes the tags identified by the <code>TagKeys</code> list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html">Resource-level permissions</a>. """,
    tags=['tag_management', 'security_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__remove_tags_from_resource(
    resource_name: str = Query(..., alias='ResourceName'),
    tag_keys: TagKeys = Query(..., alias='TagKeys'),
    action: Action240 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=RemoveTagsFromResource',
    description=""" Removes the tags identified by the <code>TagKeys</code> list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html">Resource-level permissions</a>. """,
    tags=['security_group_management', 'user_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__remove_tags_from_resource(
    action: Action240 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ResetCacheParameterGroup',
    description=""" Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters. """,
    tags=[
        'cache_parameter_management',
        'parameter_group_management',
        'engine_version_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__reset_cache_parameter_group(
    cache_parameter_group_name: str = Query(..., alias='CacheParameterGroupName'),
    reset_all_parameters: Optional[bool] = Query(None, alias='ResetAllParameters'),
    parameter_name_values: Optional[ParameterNameValues] = Query(
        None, alias='ParameterNameValues'
    ),
    action: Action244 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ResetCacheParameterGroup',
    description=""" Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters. """,
    tags=['user_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__reset_cache_parameter_group(
    action: Action244 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=RevokeCacheSecurityGroupIngress',
    description=""" Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized. """,
    tags=['security_group_management', 'security_group_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__revoke_cache_security_group_ingress(
    cache_security_group_name: str = Query(..., alias='CacheSecurityGroupName'),
    e_c2_security_group_name: str = Query(..., alias='EC2SecurityGroupName'),
    e_c2_security_group_owner_id: str = Query(..., alias='EC2SecurityGroupOwnerId'),
    action: Action248 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=RevokeCacheSecurityGroupIngress',
    description=""" Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized. """,
    tags=['service_update_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__revoke_cache_security_group_ingress(
    action: Action248 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=StartMigration',
    description=""" Start the migration of data. """,
    tags=[
        'replication_group_operations',
        'global_replication_management',
        'replication_group_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__start_migration(
    replication_group_id: str = Query(..., alias='ReplicationGroupId'),
    customer_node_endpoint_list: CustomerNodeEndpointList = Query(
        ..., alias='CustomerNodeEndpointList'
    ),
    action: Action252 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=StartMigration',
    description=""" Start the migration of data. """,
    tags=['user_management', 'service_update_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__start_migration(
    action: Action252 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=TestFailover',
    description=""" <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p>This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API. </p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from primary node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from primary node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ </a> in the <i>ElastiCache User Guide</i>.</p> """,
    tags=[
        'replication_group_operations',
        'replication_group_management',
        'replication_handling',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__test_failover(
    replication_group_id: str = Query(..., alias='ReplicationGroupId'),
    node_group_id: constr(pattern=r'\d+', min_length=1, max_length=4) = Query(
        ..., alias='NodeGroupId'
    ),
    action: Action256 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=TestFailover',
    description=""" <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p>This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API. </p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from primary node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from primary node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ </a> in the <i>ElastiCache User Guide</i>.</p> """,
    tags=['security_group_management', 'user_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__test_failover(
    action: Action256 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
